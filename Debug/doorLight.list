
doorLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004294  08004294  00005294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042dc  080042dc  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080042dc  080042dc  000052dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e4  080042e4  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042e8  080042e8  000052e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080042ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08004354  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004354  00006280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a395  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cda  00000000  00000000  0001042d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00012108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080d  00000000  00000000  00012b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017524  00000000  00000000  000133a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c630  00000000  00000000  0002a8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d78b  00000000  00000000  00036ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003390  00000000  00000000  000c46c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c7a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800427c 	.word	0x0800427c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800427c 	.word	0x0800427c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <delay_us>:


extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim11;

void delay_us(uint16_t time) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
	htim11.Instance->CNT = 0;
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <delay_us+0x30>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(htim11.Instance->CNT < time);
 8000d5e:	bf00      	nop
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <delay_us+0x30>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3f9      	bcc.n	8000d60 <delay_us+0x14>
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200000d0 	.word	0x200000d0

08000d80 <SystickCallback>:


int timeoutDoor;
void SystickCallback(){
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	if(timeoutDoor > 0) timeoutDoor--;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <SystickCallback+0x20>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	dd04      	ble.n	8000d96 <SystickCallback+0x16>
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <SystickCallback+0x20>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	4a03      	ldr	r2, [pc, #12]	@ (8000da0 <SystickCallback+0x20>)
 8000d94:	6013      	str	r3, [r2, #0]
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	20000084 	.word	0x20000084

08000da4 <app>:

void app(){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	// 초음파 초기화
	initUltrasonic(&htim3);
 8000daa:	4815      	ldr	r0, [pc, #84]	@ (8000e00 <app+0x5c>)
 8000dac:	f000 faee 	bl	800138c <initUltrasonic>
	// 타이머 초기화
	HAL_TIM_Base_Start(&htim11);
 8000db0:	4814      	ldr	r0, [pc, #80]	@ (8000e04 <app+0x60>)
 8000db2:	f001 fbb9 	bl	8002528 <HAL_TIM_Base_Start>

	while(1){
		// 초음파 값 읽기
		uint16_t distance = getDistance();
 8000db6:	f000 fba3 	bl	8001500 <getDistance>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
		printf("%d\n", distance);
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4811      	ldr	r0, [pc, #68]	@ (8000e08 <app+0x64>)
 8000dc4:	f002 fbec 	bl	80035a0 <iprintf>

		//값비교
		if(distance <= 5) {
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	2b05      	cmp	r3, #5
 8000dcc:	d809      	bhi.n	8000de2 <app+0x3e>
			timeoutDoor = 10000;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <app+0x68>)
 8000dd0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000dd4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <app+0x6c>)
 8000dde:	f000 ff15 	bl	8001c0c <HAL_GPIO_WritePin>

		}
		if(timeoutDoor == 0){
 8000de2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <app+0x68>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d105      	bne.n	8000df6 <app+0x52>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df0:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <app+0x6c>)
 8000df2:	f000 ff0b 	bl	8001c0c <HAL_GPIO_WritePin>
		}
		HAL_Delay(100);
 8000df6:	2064      	movs	r0, #100	@ 0x64
 8000df8:	f000 fc4e 	bl	8001698 <HAL_Delay>
	while(1){
 8000dfc:	e7db      	b.n	8000db6 <app+0x12>
 8000dfe:	bf00      	nop
 8000e00:	20000088 	.word	0x20000088
 8000e04:	200000d0 	.word	0x200000d0
 8000e08:	08004294 	.word	0x08004294
 8000e0c:	20000084 	.word	0x20000084
 8000e10:	40020000 	.word	0x40020000

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e18:	f000 fbcc 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1c:	f000 f80a 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e20:	f000 f8fa 	bl	8001018 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000e24:	f000 f864 	bl	8000ef0 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000e28:	f000 f8d2 	bl	8000fd0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000e2c:	f7ff ffba 	bl	8000da4 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <main+0x1c>

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	@ 0x50
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2230      	movs	r2, #48	@ 0x30
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fc01 	bl	800364a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <SystemClock_Config+0xb4>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	4a21      	ldr	r2, [pc, #132]	@ (8000ee8 <SystemClock_Config+0xb4>)
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <SystemClock_Config+0xb4>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <SystemClock_Config+0xb8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eec <SystemClock_Config+0xb8>)
 8000e7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <SystemClock_Config+0xb8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fecb 	bl	8001c40 <HAL_RCC_OscConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000eb0:	f000 f8e6 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 f92e 	bl	8002130 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000eda:	f000 f8d1 	bl	8001080 <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3750      	adds	r7, #80	@ 0x50
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40007000 	.word	0x40007000

08000ef0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000fcc <MX_TIM3_Init+0xdc>)
 8000f1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000f20:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000f22:	220f      	movs	r2, #15
 8000f24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b28      	ldr	r3, [pc, #160]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f2c:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000f2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f34:	4b24      	ldr	r3, [pc, #144]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3a:	4b23      	ldr	r3, [pc, #140]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f40:	4821      	ldr	r0, [pc, #132]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000f42:	f001 faa1 	bl	8002488 <HAL_TIM_Base_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000f4c:	f000 f898 	bl	8001080 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f54:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481a      	ldr	r0, [pc, #104]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000f5e:	f001 fe3d 	bl	8002bdc <HAL_TIM_ConfigClockSource>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f68:	f000 f88a 	bl	8001080 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f6c:	4816      	ldr	r0, [pc, #88]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000f6e:	f001 fb35 	bl	80025dc <HAL_TIM_IC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f78:	f000 f882 	bl	8001080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480f      	ldr	r0, [pc, #60]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000f8c:	f002 f9c4 	bl	8003318 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000f96:	f000 f873 	bl	8001080 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_TIM3_Init+0xd8>)
 8000fb2:	f001 fd77 	bl	8002aa4 <HAL_TIM_IC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000fbc:	f000 f860 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	@ 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000088 	.word	0x20000088
 8000fcc:	40000400 	.word	0x40000400

08000fd0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_TIM11_Init+0x40>)
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8001014 <MX_TIM11_Init+0x44>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16-1;
 8000fda:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <MX_TIM11_Init+0x40>)
 8000fdc:	220f      	movs	r2, #15
 8000fde:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <MX_TIM11_Init+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <MX_TIM11_Init+0x40>)
 8000fe8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <MX_TIM11_Init+0x40>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_TIM11_Init+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_TIM11_Init+0x40>)
 8000ffc:	f001 fa44 	bl	8002488 <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001006:	f000 f83b 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000d0 	.word	0x200000d0
 8001014:	40014800 	.word	0x40014800

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_GPIO_Init+0x60>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001034:	4a10      	ldr	r2, [pc, #64]	@ (8001078 <MX_GPIO_Init+0x60>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6313      	str	r3, [r2, #48]	@ 0x30
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_GPIO_Init+0x60>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|LED_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <MX_GPIO_Init+0x64>)
 8001050:	f000 fddc 	bl	8001c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIG_Pin LED_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LED_Pin;
 8001054:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001058:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4804      	ldr	r0, [pc, #16]	@ (800107c <MX_GPIO_Init+0x64>)
 800106c:	f000 fc4a 	bl	8001904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <Error_Handler+0x8>

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <HAL_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109a:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <HAL_MspInit+0x4c>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <HAL_MspInit+0x4c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b6:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <HAL_MspInit+0x4c>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_MspInit+0x4c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <HAL_TIM_Base_MspInit+0xbc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d134      	bne.n	8001168 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b26      	ldr	r3, [pc, #152]	@ (800119c <HAL_TIM_Base_MspInit+0xc0>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	4a25      	ldr	r2, [pc, #148]	@ (800119c <HAL_TIM_Base_MspInit+0xc0>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6413      	str	r3, [r2, #64]	@ 0x40
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <HAL_TIM_Base_MspInit+0xc0>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <HAL_TIM_Base_MspInit+0xc0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a1e      	ldr	r2, [pc, #120]	@ (800119c <HAL_TIM_Base_MspInit+0xc0>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <HAL_TIM_Base_MspInit+0xc0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001136:	2340      	movs	r3, #64	@ 0x40
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001146:	2302      	movs	r3, #2
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4813      	ldr	r0, [pc, #76]	@ (80011a0 <HAL_TIM_Base_MspInit+0xc4>)
 8001152:	f000 fbd7 	bl	8001904 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	201d      	movs	r0, #29
 800115c:	f000 fb9b 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001160:	201d      	movs	r0, #29
 8001162:	f000 fbb4 	bl	80018ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001166:	e012      	b.n	800118e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM11)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <HAL_TIM_Base_MspInit+0xc8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10d      	bne.n	800118e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <HAL_TIM_Base_MspInit+0xc0>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a08      	ldr	r2, [pc, #32]	@ (800119c <HAL_TIM_Base_MspInit+0xc0>)
 800117c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_TIM_Base_MspInit+0xc0>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40000400 	.word	0x40000400
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40014800 	.word	0x40014800

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <NMI_Handler+0x4>

080011b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <MemManage_Handler+0x4>

080011c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <UsageFault_Handler+0x4>

080011d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SystickCallback();
 80011fe:	f7ff fdbf 	bl	8000d80 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001202:	f000 fa29 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <TIM3_IRQHandler+0x10>)
 8001212:	f001 fb57 	bl	80028c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000088 	.word	0x20000088

08001220 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e00a      	b.n	8001248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001232:	f3af 8000 	nop.w
 8001236:	4601      	mov	r1, r0
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	60ba      	str	r2, [r7, #8]
 800123e:	b2ca      	uxtb	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <_read+0x12>
  }

  return len;
 8001250:	687b      	ldr	r3, [r7, #4]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e009      	b.n	8001280 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbf1      	blt.n	800126c <_write+0x12>
  }
  return len;
 8001288:	687b      	ldr	r3, [r7, #4]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_close>:

int _close(int file)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ba:	605a      	str	r2, [r3, #4]
  return 0;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_isatty>:

int _isatty(int file)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	@ (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f002 f9dc 	bl	80036e8 <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20020000 	.word	0x20020000
 800135c:	00000400 	.word	0x00000400
 8001360:	20000118 	.word	0x20000118
 8001364:	20000280 	.word	0x20000280

08001368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <SystemInit+0x20>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <SystemInit+0x20>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <initUltrasonic>:
bool IsFIrtsCaptured = 0;
bool doneCapture = false;
uint16_t distance = 0;


void initUltrasonic(TIM_HandleTypeDef *htim){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	myHtim = htim;
 8001394:	4a06      	ldr	r2, [pc, #24]	@ (80013b0 <initUltrasonic+0x24>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(myHtim, TIM_CHANNEL_1);
 800139a:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <initUltrasonic+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 f975 	bl	8002690 <HAL_TIM_IC_Start_IT>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000011c 	.word	0x2000011c
 80013b4:	00000000 	.word	0x00000000

080013b8 <HAL_TIM_IC_CaptureCallback>:

// input capture interrupt callback, 캡처 핀의 신호 감지시 작동
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7f1b      	ldrb	r3, [r3, #28]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	f040 8085 	bne.w	80014d4 <HAL_TIM_IC_CaptureCallback+0x11c>
		if(IsFIrtsCaptured == 0){
 80013ca:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	f083 0301 	eor.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d01a      	beq.n	800140e <HAL_TIM_IC_CaptureCallback+0x56>
			// echo의 상승 신호 발생 시각을 valueIC1에 기록
			valueIC1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80013d8:	2100      	movs	r1, #0
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f001 fcc6 	bl	8002d6c <HAL_TIM_ReadCapturedValue>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a42      	ldr	r2, [pc, #264]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x134>)
 80013e4:	6013      	str	r3, [r2, #0]
			IsFIrtsCaptured = 1;
 80013e6:	4b40      	ldr	r3, [pc, #256]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
			// echo의 하강 신호에 대응되는 인터럽트 설정
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6a1a      	ldr	r2, [r3, #32]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 020a 	bic.w	r2, r2, #10
 80013fa:	621a      	str	r2, [r3, #32]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6a1a      	ldr	r2, [r3, #32]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0202 	orr.w	r2, r2, #2
 800140a:	621a      	str	r2, [r3, #32]
			// 다음 측정을 위해 초기화
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1); // 인터럽트 끔
		}
	}
}
 800140c:	e062      	b.n	80014d4 <HAL_TIM_IC_CaptureCallback+0x11c>
		else if(IsFIrtsCaptured == 1){
 800140e:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d05e      	beq.n	80014d4 <HAL_TIM_IC_CaptureCallback+0x11c>
			valueIC2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f001 fca7 	bl	8002d6c <HAL_TIM_ReadCapturedValue>
 800141e:	4603      	mov	r3, r0
 8001420:	4a33      	ldr	r2, [pc, #204]	@ (80014f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001422:	6013      	str	r3, [r2, #0]
			if(valueIC1 < valueIC2){
 8001424:	4b31      	ldr	r3, [pc, #196]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b31      	ldr	r3, [pc, #196]	@ (80014f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <HAL_TIM_IC_CaptureCallback+0x88>
				difference = valueIC2 - valueIC1;
 8001430:	4b2f      	ldr	r3, [pc, #188]	@ (80014f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	4a2e      	ldr	r2, [pc, #184]	@ (80014f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00f      	b.n	8001460 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if(valueIC1 > valueIC2){
 8001440:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b2a      	ldr	r3, [pc, #168]	@ (80014f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d909      	bls.n	8001460 <HAL_TIM_IC_CaptureCallback+0xa8>
				difference = (65535 - valueIC1) + valueIC2;
 800144c:	4b28      	ldr	r3, [pc, #160]	@ (80014f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800145a:	33ff      	adds	r3, #255	@ 0xff
 800145c:	4a25      	ldr	r2, [pc, #148]	@ (80014f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800145e:	6013      	str	r3, [r2, #0]
			distance = difference * 0.034 / 2;
 8001460:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f84d 	bl	8000504 <__aeabi_ui2d>
 800146a:	a31d      	add	r3, pc, #116	@ (adr r3, 80014e0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8c2 	bl	80005f8 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001484:	f7ff f9e2 	bl	800084c <__aeabi_ddiv>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fac4 	bl	8000a1c <__aeabi_d2uiz>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 800149a:	801a      	strh	r2, [r3, #0]
			IsFIrtsCaptured = 0;
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
			doneCapture = true;
 80014a2:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_TIM_IC_CaptureCallback+0x144>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6a1a      	ldr	r2, [r3, #32]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 020a 	bic.w	r2, r2, #10
 80014b6:	621a      	str	r2, [r3, #32]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6a12      	ldr	r2, [r2, #32]
 80014c2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1); // 인터럽트 끔
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0202 	bic.w	r2, r2, #2
 80014d2:	60da      	str	r2, [r3, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	f3af 8000 	nop.w
 80014e0:	b020c49c 	.word	0xb020c49c
 80014e4:	3fa16872 	.word	0x3fa16872
 80014e8:	2000012c 	.word	0x2000012c
 80014ec:	20000120 	.word	0x20000120
 80014f0:	20000124 	.word	0x20000124
 80014f4:	20000128 	.word	0x20000128
 80014f8:	2000012e 	.word	0x2000012e
 80014fc:	2000012d 	.word	0x2000012d

08001500 <getDistance>:

uint16_t	getDistance() {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	// TRIG 핀에 10us의 펄스를 출력
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 8001504:	2201      	movs	r2, #1
 8001506:	2120      	movs	r1, #32
 8001508:	4811      	ldr	r0, [pc, #68]	@ (8001550 <getDistance+0x50>)
 800150a:	f000 fb7f 	bl	8001c0c <HAL_GPIO_WritePin>
	delay_us(10);
 800150e:	200a      	movs	r0, #10
 8001510:	f7ff fc1c 	bl	8000d4c <delay_us>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2120      	movs	r1, #32
 8001518:	480d      	ldr	r0, [pc, #52]	@ (8001550 <getDistance+0x50>)
 800151a:	f000 fb77 	bl	8001c0c <HAL_GPIO_WritePin>
	// 인터럽트 활성화
	__HAL_TIM_ENABLE_IT(myHtim, TIM_IT_CC1);
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <getDistance+0x54>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <getDistance+0x54>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 0202 	orr.w	r2, r2, #2
 8001530:	60da      	str	r2, [r3, #12]
	// 캡처 종료 대기
	doneCapture = false;
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <getDistance+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
	while(doneCapture == false);
 8001538:	bf00      	nop
 800153a:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <getDistance+0x58>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	f083 0301 	eor.w	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f8      	bne.n	800153a <getDistance+0x3a>
	// 값 반환
	return distance;
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <getDistance+0x5c>)
 800154a:	881b      	ldrh	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40020000 	.word	0x40020000
 8001554:	2000011c 	.word	0x2000011c
 8001558:	2000012d 	.word	0x2000012d
 800155c:	2000012e 	.word	0x2000012e

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001598 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001564:	f7ff ff00 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	@ (80015ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f002 f8b1 	bl	80036f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff fc3f 	bl	8000e14 <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015a4:	080042ec 	.word	0x080042ec
  ldr r2, =_sbss
 80015a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015ac:	20000280 	.word	0x20000280

080015b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <HAL_Init+0x40>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <HAL_Init+0x40>)
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <HAL_Init+0x40>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 f94f 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	200f      	movs	r0, #15
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff fd50 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f967 	bl	80018ea <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 f92f 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008
 800167c:	20000130 	.word	0x20000130

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000130 	.word	0x20000130

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4907      	ldr	r1, [pc, #28]	@ (800177c <__NVIC_EnableIRQ+0x38>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	@ (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	@ 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff29 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff3e 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff8e 	bl	80017d4 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5d 	bl	8001780 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff31 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffa2 	bl	800183c <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	@ 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e159      	b.n	8001bd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8148 	bne.w	8001bce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	2b02      	cmp	r3, #2
 8001954:	d130      	bne.n	80019b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80a2 	beq.w	8001bce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b57      	ldr	r3, [pc, #348]	@ (8001bec <HAL_GPIO_Init+0x2e8>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a56      	ldr	r2, [pc, #344]	@ (8001bec <HAL_GPIO_Init+0x2e8>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b54      	ldr	r3, [pc, #336]	@ (8001bec <HAL_GPIO_Init+0x2e8>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a52      	ldr	r2, [pc, #328]	@ (8001bf0 <HAL_GPIO_Init+0x2ec>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a49      	ldr	r2, [pc, #292]	@ (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x202>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	@ (8001bf8 <HAL_GPIO_Init+0x2f4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x1fe>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a47      	ldr	r2, [pc, #284]	@ (8001bfc <HAL_GPIO_Init+0x2f8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x1fa>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a46      	ldr	r2, [pc, #280]	@ (8001c00 <HAL_GPIO_Init+0x2fc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x1f6>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a45      	ldr	r2, [pc, #276]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x1f2>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e008      	b.n	8001b08 <HAL_GPIO_Init+0x204>
 8001af6:	2307      	movs	r3, #7
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x204>
 8001afa:	2303      	movs	r3, #3
 8001afc:	e004      	b.n	8001b08 <HAL_GPIO_Init+0x204>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_Init+0x204>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_GPIO_Init+0x204>
 8001b06:	2300      	movs	r3, #0
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	f002 0203 	and.w	r2, r2, #3
 8001b0e:	0092      	lsls	r2, r2, #2
 8001b10:	4093      	lsls	r3, r2
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b18:	4935      	ldr	r1, [pc, #212]	@ (8001bf0 <HAL_GPIO_Init+0x2ec>)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b26:	4b38      	ldr	r3, [pc, #224]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b50:	4b2d      	ldr	r3, [pc, #180]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b74:	4a24      	ldr	r2, [pc, #144]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b7a:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	2b0f      	cmp	r3, #15
 8001bd8:	f67f aea2 	bls.w	8001920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3724      	adds	r7, #36	@ 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40013800 	.word	0x40013800
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020c00 	.word	0x40020c00
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40013c00 	.word	0x40013c00

08001c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c1c:	787b      	ldrb	r3, [r7, #1]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c28:	e003      	b.n	8001c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c2a:	887b      	ldrh	r3, [r7, #2]
 8001c2c:	041a      	lsls	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	619a      	str	r2, [r3, #24]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e267      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d075      	beq.n	8001d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c5e:	4b88      	ldr	r3, [pc, #544]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d00c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6a:	4b85      	ldr	r3, [pc, #532]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d112      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c76:	4b82      	ldr	r3, [pc, #520]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c82:	d10b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	4b7e      	ldr	r3, [pc, #504]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d05b      	beq.n	8001d48 <HAL_RCC_OscConfig+0x108>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d157      	bne.n	8001d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e242      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x74>
 8001ca6:	4b76      	ldr	r3, [pc, #472]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a75      	ldr	r2, [pc, #468]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e01d      	b.n	8001cf0 <HAL_RCC_OscConfig+0xb0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x98>
 8001cbe:	4b70      	ldr	r3, [pc, #448]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6f      	ldr	r2, [pc, #444]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b6d      	ldr	r3, [pc, #436]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6c      	ldr	r2, [pc, #432]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xb0>
 8001cd8:	4b69      	ldr	r3, [pc, #420]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a68      	ldr	r2, [pc, #416]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b66      	ldr	r3, [pc, #408]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a65      	ldr	r2, [pc, #404]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fcc2 	bl	8001680 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fcbe 	bl	8001680 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	@ 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e207      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b5b      	ldr	r3, [pc, #364]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xc0>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fcae 	bl	8001680 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fcaa 	bl	8001680 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	@ 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1f3      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	4b51      	ldr	r3, [pc, #324]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0xe8>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d56:	4b4a      	ldr	r3, [pc, #296]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b47      	ldr	r3, [pc, #284]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6e:	4b44      	ldr	r3, [pc, #272]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b41      	ldr	r3, [pc, #260]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x152>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1c7      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b3b      	ldr	r3, [pc, #236]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4937      	ldr	r1, [pc, #220]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b34      	ldr	r3, [pc, #208]	@ (8001e84 <HAL_RCC_OscConfig+0x244>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff fc63 	bl	8001680 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fc5f 	bl	8001680 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1a8      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b28      	ldr	r3, [pc, #160]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4925      	ldr	r1, [pc, #148]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <HAL_RCC_OscConfig+0x244>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fc42 	bl	8001680 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff fc3e 	bl	8001680 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e187      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d036      	beq.n	8001e98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_RCC_OscConfig+0x248>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff fc22 	bl	8001680 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff fc1e 	bl	8001680 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e167      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x200>
 8001e5e:	e01b      	b.n	8001e98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e60:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_RCC_OscConfig+0x248>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fc0b 	bl	8001680 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	e00e      	b.n	8001e8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fc07 	bl	8001680 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d907      	bls.n	8001e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e150      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	42470000 	.word	0x42470000
 8001e88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b88      	ldr	r3, [pc, #544]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ea      	bne.n	8001e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8097 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b81      	ldr	r3, [pc, #516]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b7d      	ldr	r3, [pc, #500]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	4a7c      	ldr	r2, [pc, #496]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b77      	ldr	r3, [pc, #476]	@ (80020b4 <HAL_RCC_OscConfig+0x474>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee2:	4b74      	ldr	r3, [pc, #464]	@ (80020b4 <HAL_RCC_OscConfig+0x474>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a73      	ldr	r2, [pc, #460]	@ (80020b4 <HAL_RCC_OscConfig+0x474>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fbc7 	bl	8001680 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7ff fbc3 	bl	8001680 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e10c      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b6a      	ldr	r3, [pc, #424]	@ (80020b4 <HAL_RCC_OscConfig+0x474>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2ea>
 8001f1c:	4b64      	ldr	r3, [pc, #400]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f20:	4a63      	ldr	r2, [pc, #396]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x324>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x30c>
 8001f32:	4b5f      	ldr	r3, [pc, #380]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f36:	4a5e      	ldr	r2, [pc, #376]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f42:	4a5b      	ldr	r2, [pc, #364]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x324>
 8001f4c:	4b58      	ldr	r3, [pc, #352]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f50:	4a57      	ldr	r2, [pc, #348]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f58:	4b55      	ldr	r3, [pc, #340]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5c:	4a54      	ldr	r2, [pc, #336]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	f023 0304 	bic.w	r3, r3, #4
 8001f62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7ff fb88 	bl	8001680 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7ff fb84 	bl	8001680 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0cb      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8a:	4b49      	ldr	r3, [pc, #292]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0ee      	beq.n	8001f74 <HAL_RCC_OscConfig+0x334>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7ff fb72 	bl	8001680 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fb6e 	bl	8001680 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0b5      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ee      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b39      	ldr	r3, [pc, #228]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	4a38      	ldr	r2, [pc, #224]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80a1 	beq.w	8002120 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fde:	4b34      	ldr	r3, [pc, #208]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d05c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d141      	bne.n	8002076 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b31      	ldr	r3, [pc, #196]	@ (80020b8 <HAL_RCC_OscConfig+0x478>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fb42 	bl	8001680 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff fb3e 	bl	8001680 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e087      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	4b27      	ldr	r3, [pc, #156]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	3b01      	subs	r3, #1
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	491b      	ldr	r1, [pc, #108]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002048:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_RCC_OscConfig+0x478>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff fb17 	bl	8001680 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff fb13 	bl	8001680 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e05c      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x416>
 8002074:	e054      	b.n	8002120 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <HAL_RCC_OscConfig+0x478>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fb00 	bl	8001680 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff fafc 	bl	8001680 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e045      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_OscConfig+0x470>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x444>
 80020a2:	e03d      	b.n	8002120 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e038      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40007000 	.word	0x40007000
 80020b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <HAL_RCC_OscConfig+0x4ec>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d028      	beq.n	800211c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d121      	bne.n	800211c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d11a      	bne.n	800211c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d111      	bne.n	800211c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	3b01      	subs	r3, #1
 8002106:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d107      	bne.n	800211c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002116:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0cc      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b68      	ldr	r3, [pc, #416]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d90c      	bls.n	800216c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b65      	ldr	r3, [pc, #404]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b63      	ldr	r3, [pc, #396]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0b8      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002184:	4b59      	ldr	r3, [pc, #356]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a58      	ldr	r2, [pc, #352]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800218e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800219c:	4b53      	ldr	r3, [pc, #332]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a52      	ldr	r2, [pc, #328]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b50      	ldr	r3, [pc, #320]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	494d      	ldr	r1, [pc, #308]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d044      	beq.n	8002250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b47      	ldr	r3, [pc, #284]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d119      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e07f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b3f      	ldr	r3, [pc, #252]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e067      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b37      	ldr	r3, [pc, #220]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4934      	ldr	r1, [pc, #208]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002220:	f7ff fa2e 	bl	8001680 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7ff fa2a 	bl	8001680 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e04f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002250:	4b25      	ldr	r3, [pc, #148]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d20c      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e032      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002284:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4916      	ldr	r1, [pc, #88]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a2:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	490e      	ldr	r1, [pc, #56]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022b6:	f000 f821 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80022ba:	4602      	mov	r2, r0
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	490a      	ldr	r1, [pc, #40]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	5ccb      	ldrb	r3, [r1, r3]
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	4a09      	ldr	r2, [pc, #36]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022d2:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f98e 	bl	80015f8 <HAL_InitTick>

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023c00 	.word	0x40023c00
 80022ec:	40023800 	.word	0x40023800
 80022f0:	08004298 	.word	0x08004298
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002300:	b090      	sub	sp, #64	@ 0x40
 8002302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002314:	4b59      	ldr	r3, [pc, #356]	@ (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d00d      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x40>
 8002320:	2b08      	cmp	r3, #8
 8002322:	f200 80a1 	bhi.w	8002468 <HAL_RCC_GetSysClockFreq+0x16c>
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x34>
 800232a:	2b04      	cmp	r3, #4
 800232c:	d003      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x3a>
 800232e:	e09b      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b53      	ldr	r3, [pc, #332]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x184>)
 8002332:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002334:	e09b      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002336:	4b53      	ldr	r3, [pc, #332]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x188>)
 8002338:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800233a:	e098      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800233c:	4b4f      	ldr	r3, [pc, #316]	@ (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002344:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002346:	4b4d      	ldr	r3, [pc, #308]	@ (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d028      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002352:	4b4a      	ldr	r3, [pc, #296]	@ (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	2200      	movs	r2, #0
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	627a      	str	r2, [r7, #36]	@ 0x24
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002364:	2100      	movs	r1, #0
 8002366:	4b47      	ldr	r3, [pc, #284]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x188>)
 8002368:	fb03 f201 	mul.w	r2, r3, r1
 800236c:	2300      	movs	r3, #0
 800236e:	fb00 f303 	mul.w	r3, r0, r3
 8002372:	4413      	add	r3, r2
 8002374:	4a43      	ldr	r2, [pc, #268]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x188>)
 8002376:	fba0 1202 	umull	r1, r2, r0, r2
 800237a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800237c:	460a      	mov	r2, r1
 800237e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002382:	4413      	add	r3, r2
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002388:	2200      	movs	r2, #0
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	61fa      	str	r2, [r7, #28]
 800238e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002396:	f7fe fb61 	bl	8000a5c <__aeabi_uldivmod>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4613      	mov	r3, r2
 80023a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023a2:	e053      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a4:	4b35      	ldr	r3, [pc, #212]	@ (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	2200      	movs	r2, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	617a      	str	r2, [r7, #20]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023b6:	f04f 0b00 	mov.w	fp, #0
 80023ba:	4652      	mov	r2, sl
 80023bc:	465b      	mov	r3, fp
 80023be:	f04f 0000 	mov.w	r0, #0
 80023c2:	f04f 0100 	mov.w	r1, #0
 80023c6:	0159      	lsls	r1, r3, #5
 80023c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023cc:	0150      	lsls	r0, r2, #5
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	ebb2 080a 	subs.w	r8, r2, sl
 80023d6:	eb63 090b 	sbc.w	r9, r3, fp
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023ee:	ebb2 0408 	subs.w	r4, r2, r8
 80023f2:	eb63 0509 	sbc.w	r5, r3, r9
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	00eb      	lsls	r3, r5, #3
 8002400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002404:	00e2      	lsls	r2, r4, #3
 8002406:	4614      	mov	r4, r2
 8002408:	461d      	mov	r5, r3
 800240a:	eb14 030a 	adds.w	r3, r4, sl
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	eb45 030b 	adc.w	r3, r5, fp
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002422:	4629      	mov	r1, r5
 8002424:	028b      	lsls	r3, r1, #10
 8002426:	4621      	mov	r1, r4
 8002428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800242c:	4621      	mov	r1, r4
 800242e:	028a      	lsls	r2, r1, #10
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002436:	2200      	movs	r2, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	60fa      	str	r2, [r7, #12]
 800243c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002440:	f7fe fb0c 	bl	8000a5c <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4613      	mov	r3, r2
 800244a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	3301      	adds	r3, #1
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800245c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002466:	e002      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x184>)
 800246a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800246c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002470:	4618      	mov	r0, r3
 8002472:	3740      	adds	r7, #64	@ 0x40
 8002474:	46bd      	mov	sp, r7
 8002476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	00f42400 	.word	0x00f42400
 8002484:	017d7840 	.word	0x017d7840

08002488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e041      	b.n	800251e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fe14 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f000 fcbc 	bl	8002e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d001      	beq.n	8002540 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e03c      	b.n	80025ba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1e      	ldr	r2, [pc, #120]	@ (80025c8 <HAL_TIM_Base_Start+0xa0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d018      	beq.n	8002584 <HAL_TIM_Base_Start+0x5c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800255a:	d013      	beq.n	8002584 <HAL_TIM_Base_Start+0x5c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1a      	ldr	r2, [pc, #104]	@ (80025cc <HAL_TIM_Base_Start+0xa4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00e      	beq.n	8002584 <HAL_TIM_Base_Start+0x5c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a19      	ldr	r2, [pc, #100]	@ (80025d0 <HAL_TIM_Base_Start+0xa8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_TIM_Base_Start+0x5c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <HAL_TIM_Base_Start+0xac>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d004      	beq.n	8002584 <HAL_TIM_Base_Start+0x5c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a16      	ldr	r2, [pc, #88]	@ (80025d8 <HAL_TIM_Base_Start+0xb0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d111      	bne.n	80025a8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b06      	cmp	r3, #6
 8002594:	d010      	beq.n	80025b8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a6:	e007      	b.n	80025b8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800
 80025d4:	40000c00 	.word	0x40000c00
 80025d8:	40014000 	.word	0x40014000

080025dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e041      	b.n	8002672 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f839 	bl	800267a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 fc12 	bl	8002e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_IC_Start_IT+0x1e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	e013      	b.n	80026d6 <HAL_TIM_IC_Start_IT+0x46>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d104      	bne.n	80026be <HAL_TIM_IC_Start_IT+0x2e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	e00b      	b.n	80026d6 <HAL_TIM_IC_Start_IT+0x46>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d104      	bne.n	80026ce <HAL_TIM_IC_Start_IT+0x3e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	e003      	b.n	80026d6 <HAL_TIM_IC_Start_IT+0x46>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d104      	bne.n	80026e8 <HAL_TIM_IC_Start_IT+0x58>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e013      	b.n	8002710 <HAL_TIM_IC_Start_IT+0x80>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d104      	bne.n	80026f8 <HAL_TIM_IC_Start_IT+0x68>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e00b      	b.n	8002710 <HAL_TIM_IC_Start_IT+0x80>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d104      	bne.n	8002708 <HAL_TIM_IC_Start_IT+0x78>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e003      	b.n	8002710 <HAL_TIM_IC_Start_IT+0x80>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800270e:	b2db      	uxtb	r3, r3
 8002710:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002712:	7bbb      	ldrb	r3, [r7, #14]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d102      	bne.n	800271e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002718:	7b7b      	ldrb	r3, [r7, #13]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d001      	beq.n	8002722 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0c2      	b.n	80028a8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <HAL_TIM_IC_Start_IT+0xa2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002730:	e013      	b.n	800275a <HAL_TIM_IC_Start_IT+0xca>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d104      	bne.n	8002742 <HAL_TIM_IC_Start_IT+0xb2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002740:	e00b      	b.n	800275a <HAL_TIM_IC_Start_IT+0xca>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d104      	bne.n	8002752 <HAL_TIM_IC_Start_IT+0xc2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002750:	e003      	b.n	800275a <HAL_TIM_IC_Start_IT+0xca>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <HAL_TIM_IC_Start_IT+0xda>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002768:	e013      	b.n	8002792 <HAL_TIM_IC_Start_IT+0x102>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d104      	bne.n	800277a <HAL_TIM_IC_Start_IT+0xea>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002778:	e00b      	b.n	8002792 <HAL_TIM_IC_Start_IT+0x102>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d104      	bne.n	800278a <HAL_TIM_IC_Start_IT+0xfa>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002788:	e003      	b.n	8002792 <HAL_TIM_IC_Start_IT+0x102>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2202      	movs	r2, #2
 800278e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d841      	bhi.n	800281c <HAL_TIM_IC_Start_IT+0x18c>
 8002798:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <HAL_TIM_IC_Start_IT+0x110>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027d5 	.word	0x080027d5
 80027a4:	0800281d 	.word	0x0800281d
 80027a8:	0800281d 	.word	0x0800281d
 80027ac:	0800281d 	.word	0x0800281d
 80027b0:	080027e7 	.word	0x080027e7
 80027b4:	0800281d 	.word	0x0800281d
 80027b8:	0800281d 	.word	0x0800281d
 80027bc:	0800281d 	.word	0x0800281d
 80027c0:	080027f9 	.word	0x080027f9
 80027c4:	0800281d 	.word	0x0800281d
 80027c8:	0800281d 	.word	0x0800281d
 80027cc:	0800281d 	.word	0x0800281d
 80027d0:	0800280b 	.word	0x0800280b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0202 	orr.w	r2, r2, #2
 80027e2:	60da      	str	r2, [r3, #12]
      break;
 80027e4:	e01d      	b.n	8002822 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0204 	orr.w	r2, r2, #4
 80027f4:	60da      	str	r2, [r3, #12]
      break;
 80027f6:	e014      	b.n	8002822 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0208 	orr.w	r2, r2, #8
 8002806:	60da      	str	r2, [r3, #12]
      break;
 8002808:	e00b      	b.n	8002822 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0210 	orr.w	r2, r2, #16
 8002818:	60da      	str	r2, [r3, #12]
      break;
 800281a:	e002      	b.n	8002822 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      break;
 8002820:	bf00      	nop
  }

  if (status == HAL_OK)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d13e      	bne.n	80028a6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2201      	movs	r2, #1
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fd4b 	bl	80032cc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <HAL_TIM_IC_Start_IT+0x220>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d018      	beq.n	8002872 <HAL_TIM_IC_Start_IT+0x1e2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002848:	d013      	beq.n	8002872 <HAL_TIM_IC_Start_IT+0x1e2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_TIM_IC_Start_IT+0x224>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_TIM_IC_Start_IT+0x1e2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_TIM_IC_Start_IT+0x228>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_TIM_IC_Start_IT+0x1e2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a16      	ldr	r2, [pc, #88]	@ (80028bc <HAL_TIM_IC_Start_IT+0x22c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_TIM_IC_Start_IT+0x1e2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <HAL_TIM_IC_Start_IT+0x230>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b06      	cmp	r3, #6
 8002882:	d010      	beq.n	80028a6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	e007      	b.n	80028a6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40010000 	.word	0x40010000
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800
 80028bc:	40000c00 	.word	0x40000c00
 80028c0:	40014000 	.word	0x40014000

080028c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d020      	beq.n	8002928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01b      	beq.n	8002928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0202 	mvn.w	r2, #2
 80028f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fd52 	bl	80013b8 <HAL_TIM_IC_CaptureCallback>
 8002914:	e005      	b.n	8002922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fa76 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fa7d 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d020      	beq.n	8002974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0204 	mvn.w	r2, #4
 8002944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe fd2c 	bl	80013b8 <HAL_TIM_IC_CaptureCallback>
 8002960:	e005      	b.n	800296e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fa50 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fa57 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d020      	beq.n	80029c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fd06 	bl	80013b8 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fa2a 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fa31 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d020      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0210 	mvn.w	r2, #16
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2208      	movs	r2, #8
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe fce0 	bl	80013b8 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fa04 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fa0b 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0201 	mvn.w	r2, #1
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9e2 	bl	8002df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fcda 	bl	8003408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f9dc 	bl	8002e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00c      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0220 	mvn.w	r2, #32
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fcac 	bl	80033f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e088      	b.n	8002bd4 <HAL_TIM_IC_ConfigChannel+0x130>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002ae0:	f000 fa3c 	bl	8002f5c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 020c 	bic.w	r2, r2, #12
 8002af2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6999      	ldr	r1, [r3, #24]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	619a      	str	r2, [r3, #24]
 8002b06:	e060      	b.n	8002bca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d11c      	bne.n	8002b48 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002b1e:	f000 fab4 	bl	800308a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b30:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6999      	ldr	r1, [r3, #24]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	021a      	lsls	r2, r3, #8
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	619a      	str	r2, [r3, #24]
 8002b46:	e040      	b.n	8002bca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d11b      	bne.n	8002b86 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002b5e:	f000 fb01 	bl	8003164 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 020c 	bic.w	r2, r2, #12
 8002b70:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69d9      	ldr	r1, [r3, #28]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	61da      	str	r2, [r3, #28]
 8002b84:	e021      	b.n	8002bca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	d11c      	bne.n	8002bc6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b9c:	f000 fb1e 	bl	80031dc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002bae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69d9      	ldr	r1, [r3, #28]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	61da      	str	r2, [r3, #28]
 8002bc4:	e001      	b.n	8002bca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0b4      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x186>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c30:	d03e      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c36:	f200 8087 	bhi.w	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3e:	f000 8086 	beq.w	8002d4e <HAL_TIM_ConfigClockSource+0x172>
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c46:	d87f      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b70      	cmp	r3, #112	@ 0x70
 8002c4a:	d01a      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xa6>
 8002c4c:	2b70      	cmp	r3, #112	@ 0x70
 8002c4e:	d87b      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b60      	cmp	r3, #96	@ 0x60
 8002c52:	d050      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8002c54:	2b60      	cmp	r3, #96	@ 0x60
 8002c56:	d877      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b50      	cmp	r3, #80	@ 0x50
 8002c5a:	d03c      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8002c5c:	2b50      	cmp	r3, #80	@ 0x50
 8002c5e:	d873      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b40      	cmp	r3, #64	@ 0x40
 8002c62:	d058      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0x13a>
 8002c64:	2b40      	cmp	r3, #64	@ 0x40
 8002c66:	d86f      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b30      	cmp	r3, #48	@ 0x30
 8002c6a:	d064      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x15a>
 8002c6c:	2b30      	cmp	r3, #48	@ 0x30
 8002c6e:	d86b      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d060      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x15a>
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d867      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d05c      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x15a>
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d05a      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x15a>
 8002c80:	e062      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c92:	f000 fafb 	bl	800328c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	609a      	str	r2, [r3, #8]
      break;
 8002cae:	e04f      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cc0:	f000 fae4 	bl	800328c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cd2:	609a      	str	r2, [r3, #8]
      break;
 8002cd4:	e03c      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f000 f9a2 	bl	800302c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2150      	movs	r1, #80	@ 0x50
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fab1 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002cf4:	e02c      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d02:	461a      	mov	r2, r3
 8002d04:	f000 f9fe 	bl	8003104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2160      	movs	r1, #96	@ 0x60
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 faa1 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002d14:	e01c      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f982 	bl	800302c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2140      	movs	r1, #64	@ 0x40
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fa91 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002d34:	e00c      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f000 fa88 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002d46:	e003      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4c:	e000      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d831      	bhi.n	8002de4 <HAL_TIM_ReadCapturedValue+0x78>
 8002d80:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002dbd 	.word	0x08002dbd
 8002d8c:	08002de5 	.word	0x08002de5
 8002d90:	08002de5 	.word	0x08002de5
 8002d94:	08002de5 	.word	0x08002de5
 8002d98:	08002dc7 	.word	0x08002dc7
 8002d9c:	08002de5 	.word	0x08002de5
 8002da0:	08002de5 	.word	0x08002de5
 8002da4:	08002de5 	.word	0x08002de5
 8002da8:	08002dd1 	.word	0x08002dd1
 8002dac:	08002de5 	.word	0x08002de5
 8002db0:	08002de5 	.word	0x08002de5
 8002db4:	08002de5 	.word	0x08002de5
 8002db8:	08002ddb 	.word	0x08002ddb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc2:	60fb      	str	r3, [r7, #12]

      break;
 8002dc4:	e00f      	b.n	8002de6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dcc:	60fb      	str	r3, [r7, #12]

      break;
 8002dce:	e00a      	b.n	8002de6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd6:	60fb      	str	r3, [r7, #12]

      break;
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	60fb      	str	r3, [r7, #12]

      break;
 8002de2:	e000      	b.n	8002de6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002de4:	bf00      	nop
  }

  return tmpreg;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a3a      	ldr	r2, [pc, #232]	@ (8002f40 <TIM_Base_SetConfig+0xfc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00f      	beq.n	8002e7c <TIM_Base_SetConfig+0x38>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e62:	d00b      	beq.n	8002e7c <TIM_Base_SetConfig+0x38>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a37      	ldr	r2, [pc, #220]	@ (8002f44 <TIM_Base_SetConfig+0x100>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <TIM_Base_SetConfig+0x38>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a36      	ldr	r2, [pc, #216]	@ (8002f48 <TIM_Base_SetConfig+0x104>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d003      	beq.n	8002e7c <TIM_Base_SetConfig+0x38>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a35      	ldr	r2, [pc, #212]	@ (8002f4c <TIM_Base_SetConfig+0x108>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d108      	bne.n	8002e8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a2b      	ldr	r2, [pc, #172]	@ (8002f40 <TIM_Base_SetConfig+0xfc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01b      	beq.n	8002ece <TIM_Base_SetConfig+0x8a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e9c:	d017      	beq.n	8002ece <TIM_Base_SetConfig+0x8a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a28      	ldr	r2, [pc, #160]	@ (8002f44 <TIM_Base_SetConfig+0x100>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <TIM_Base_SetConfig+0x8a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a27      	ldr	r2, [pc, #156]	@ (8002f48 <TIM_Base_SetConfig+0x104>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00f      	beq.n	8002ece <TIM_Base_SetConfig+0x8a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a26      	ldr	r2, [pc, #152]	@ (8002f4c <TIM_Base_SetConfig+0x108>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <TIM_Base_SetConfig+0x8a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a25      	ldr	r2, [pc, #148]	@ (8002f50 <TIM_Base_SetConfig+0x10c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <TIM_Base_SetConfig+0x8a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a24      	ldr	r2, [pc, #144]	@ (8002f54 <TIM_Base_SetConfig+0x110>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_Base_SetConfig+0x8a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a23      	ldr	r2, [pc, #140]	@ (8002f58 <TIM_Base_SetConfig+0x114>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d108      	bne.n	8002ee0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a0e      	ldr	r2, [pc, #56]	@ (8002f40 <TIM_Base_SetConfig+0xfc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d103      	bne.n	8002f14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f023 0201 	bic.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	611a      	str	r2, [r3, #16]
  }
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40000800 	.word	0x40000800
 8002f4c:	40000c00 	.word	0x40000c00
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40014400 	.word	0x40014400
 8002f58:	40014800 	.word	0x40014800

08002f5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f023 0201 	bic.w	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4a24      	ldr	r2, [pc, #144]	@ (8003018 <TIM_TI1_SetConfig+0xbc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x56>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f90:	d00f      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x56>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a21      	ldr	r2, [pc, #132]	@ (800301c <TIM_TI1_SetConfig+0xc0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00b      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x56>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a20      	ldr	r2, [pc, #128]	@ (8003020 <TIM_TI1_SetConfig+0xc4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x56>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <TIM_TI1_SetConfig+0xc8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d003      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x56>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a1e      	ldr	r2, [pc, #120]	@ (8003028 <TIM_TI1_SetConfig+0xcc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <TIM_TI1_SetConfig+0x5a>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <TIM_TI1_SetConfig+0x5c>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	e003      	b.n	8002fd6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f023 030a 	bic.w	r3, r3, #10
 8002ff0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f003 030a 	and.w	r3, r3, #10
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	621a      	str	r2, [r3, #32]
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40014000 	.word	0x40014000

0800302c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0201 	bic.w	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f023 030a 	bic.w	r3, r3, #10
 8003068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	621a      	str	r2, [r3, #32]
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800308a:	b480      	push	{r7}
 800308c:	b087      	sub	sp, #28
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0210 	bic.w	r2, r3, #16
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	031b      	lsls	r3, r3, #12
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	621a      	str	r2, [r3, #32]
}
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f023 0210 	bic.w	r2, r3, #16
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800312e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	031b      	lsls	r3, r3, #12
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	621a      	str	r2, [r3, #32]
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f023 0303 	bic.w	r3, r3, #3
 8003190:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80031b4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003208:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800321a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	031b      	lsls	r3, r3, #12
 8003220:	b29b      	uxth	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800322e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	031b      	lsls	r3, r3, #12
 8003234:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	f043 0307 	orr.w	r3, r3, #7
 8003278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	021a      	lsls	r2, r3, #8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2201      	movs	r2, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	621a      	str	r2, [r3, #32]
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800332c:	2302      	movs	r3, #2
 800332e:	e050      	b.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1c      	ldr	r2, [pc, #112]	@ (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d018      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337c:	d013      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a18      	ldr	r2, [pc, #96]	@ (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a16      	ldr	r2, [pc, #88]	@ (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a15      	ldr	r2, [pc, #84]	@ (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10c      	bne.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40014000 	.word	0x40014000

080033f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <std>:
 800341c:	2300      	movs	r3, #0
 800341e:	b510      	push	{r4, lr}
 8003420:	4604      	mov	r4, r0
 8003422:	e9c0 3300 	strd	r3, r3, [r0]
 8003426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800342a:	6083      	str	r3, [r0, #8]
 800342c:	8181      	strh	r1, [r0, #12]
 800342e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003430:	81c2      	strh	r2, [r0, #14]
 8003432:	6183      	str	r3, [r0, #24]
 8003434:	4619      	mov	r1, r3
 8003436:	2208      	movs	r2, #8
 8003438:	305c      	adds	r0, #92	@ 0x5c
 800343a:	f000 f906 	bl	800364a <memset>
 800343e:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <std+0x58>)
 8003440:	6263      	str	r3, [r4, #36]	@ 0x24
 8003442:	4b0d      	ldr	r3, [pc, #52]	@ (8003478 <std+0x5c>)
 8003444:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003446:	4b0d      	ldr	r3, [pc, #52]	@ (800347c <std+0x60>)
 8003448:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800344a:	4b0d      	ldr	r3, [pc, #52]	@ (8003480 <std+0x64>)
 800344c:	6323      	str	r3, [r4, #48]	@ 0x30
 800344e:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <std+0x68>)
 8003450:	6224      	str	r4, [r4, #32]
 8003452:	429c      	cmp	r4, r3
 8003454:	d006      	beq.n	8003464 <std+0x48>
 8003456:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800345a:	4294      	cmp	r4, r2
 800345c:	d002      	beq.n	8003464 <std+0x48>
 800345e:	33d0      	adds	r3, #208	@ 0xd0
 8003460:	429c      	cmp	r4, r3
 8003462:	d105      	bne.n	8003470 <std+0x54>
 8003464:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800346c:	f000 b966 	b.w	800373c <__retarget_lock_init_recursive>
 8003470:	bd10      	pop	{r4, pc}
 8003472:	bf00      	nop
 8003474:	080035c5 	.word	0x080035c5
 8003478:	080035e7 	.word	0x080035e7
 800347c:	0800361f 	.word	0x0800361f
 8003480:	08003643 	.word	0x08003643
 8003484:	20000134 	.word	0x20000134

08003488 <stdio_exit_handler>:
 8003488:	4a02      	ldr	r2, [pc, #8]	@ (8003494 <stdio_exit_handler+0xc>)
 800348a:	4903      	ldr	r1, [pc, #12]	@ (8003498 <stdio_exit_handler+0x10>)
 800348c:	4803      	ldr	r0, [pc, #12]	@ (800349c <stdio_exit_handler+0x14>)
 800348e:	f000 b869 	b.w	8003564 <_fwalk_sglue>
 8003492:	bf00      	nop
 8003494:	2000000c 	.word	0x2000000c
 8003498:	08003fdd 	.word	0x08003fdd
 800349c:	2000001c 	.word	0x2000001c

080034a0 <cleanup_stdio>:
 80034a0:	6841      	ldr	r1, [r0, #4]
 80034a2:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <cleanup_stdio+0x34>)
 80034a4:	4299      	cmp	r1, r3
 80034a6:	b510      	push	{r4, lr}
 80034a8:	4604      	mov	r4, r0
 80034aa:	d001      	beq.n	80034b0 <cleanup_stdio+0x10>
 80034ac:	f000 fd96 	bl	8003fdc <_fflush_r>
 80034b0:	68a1      	ldr	r1, [r4, #8]
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <cleanup_stdio+0x38>)
 80034b4:	4299      	cmp	r1, r3
 80034b6:	d002      	beq.n	80034be <cleanup_stdio+0x1e>
 80034b8:	4620      	mov	r0, r4
 80034ba:	f000 fd8f 	bl	8003fdc <_fflush_r>
 80034be:	68e1      	ldr	r1, [r4, #12]
 80034c0:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <cleanup_stdio+0x3c>)
 80034c2:	4299      	cmp	r1, r3
 80034c4:	d004      	beq.n	80034d0 <cleanup_stdio+0x30>
 80034c6:	4620      	mov	r0, r4
 80034c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034cc:	f000 bd86 	b.w	8003fdc <_fflush_r>
 80034d0:	bd10      	pop	{r4, pc}
 80034d2:	bf00      	nop
 80034d4:	20000134 	.word	0x20000134
 80034d8:	2000019c 	.word	0x2000019c
 80034dc:	20000204 	.word	0x20000204

080034e0 <global_stdio_init.part.0>:
 80034e0:	b510      	push	{r4, lr}
 80034e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <global_stdio_init.part.0+0x30>)
 80034e4:	4c0b      	ldr	r4, [pc, #44]	@ (8003514 <global_stdio_init.part.0+0x34>)
 80034e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003518 <global_stdio_init.part.0+0x38>)
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	4620      	mov	r0, r4
 80034ec:	2200      	movs	r2, #0
 80034ee:	2104      	movs	r1, #4
 80034f0:	f7ff ff94 	bl	800341c <std>
 80034f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80034f8:	2201      	movs	r2, #1
 80034fa:	2109      	movs	r1, #9
 80034fc:	f7ff ff8e 	bl	800341c <std>
 8003500:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003504:	2202      	movs	r2, #2
 8003506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800350a:	2112      	movs	r1, #18
 800350c:	f7ff bf86 	b.w	800341c <std>
 8003510:	2000026c 	.word	0x2000026c
 8003514:	20000134 	.word	0x20000134
 8003518:	08003489 	.word	0x08003489

0800351c <__sfp_lock_acquire>:
 800351c:	4801      	ldr	r0, [pc, #4]	@ (8003524 <__sfp_lock_acquire+0x8>)
 800351e:	f000 b90e 	b.w	800373e <__retarget_lock_acquire_recursive>
 8003522:	bf00      	nop
 8003524:	20000275 	.word	0x20000275

08003528 <__sfp_lock_release>:
 8003528:	4801      	ldr	r0, [pc, #4]	@ (8003530 <__sfp_lock_release+0x8>)
 800352a:	f000 b909 	b.w	8003740 <__retarget_lock_release_recursive>
 800352e:	bf00      	nop
 8003530:	20000275 	.word	0x20000275

08003534 <__sinit>:
 8003534:	b510      	push	{r4, lr}
 8003536:	4604      	mov	r4, r0
 8003538:	f7ff fff0 	bl	800351c <__sfp_lock_acquire>
 800353c:	6a23      	ldr	r3, [r4, #32]
 800353e:	b11b      	cbz	r3, 8003548 <__sinit+0x14>
 8003540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003544:	f7ff bff0 	b.w	8003528 <__sfp_lock_release>
 8003548:	4b04      	ldr	r3, [pc, #16]	@ (800355c <__sinit+0x28>)
 800354a:	6223      	str	r3, [r4, #32]
 800354c:	4b04      	ldr	r3, [pc, #16]	@ (8003560 <__sinit+0x2c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f5      	bne.n	8003540 <__sinit+0xc>
 8003554:	f7ff ffc4 	bl	80034e0 <global_stdio_init.part.0>
 8003558:	e7f2      	b.n	8003540 <__sinit+0xc>
 800355a:	bf00      	nop
 800355c:	080034a1 	.word	0x080034a1
 8003560:	2000026c 	.word	0x2000026c

08003564 <_fwalk_sglue>:
 8003564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003568:	4607      	mov	r7, r0
 800356a:	4688      	mov	r8, r1
 800356c:	4614      	mov	r4, r2
 800356e:	2600      	movs	r6, #0
 8003570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003574:	f1b9 0901 	subs.w	r9, r9, #1
 8003578:	d505      	bpl.n	8003586 <_fwalk_sglue+0x22>
 800357a:	6824      	ldr	r4, [r4, #0]
 800357c:	2c00      	cmp	r4, #0
 800357e:	d1f7      	bne.n	8003570 <_fwalk_sglue+0xc>
 8003580:	4630      	mov	r0, r6
 8003582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003586:	89ab      	ldrh	r3, [r5, #12]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d907      	bls.n	800359c <_fwalk_sglue+0x38>
 800358c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003590:	3301      	adds	r3, #1
 8003592:	d003      	beq.n	800359c <_fwalk_sglue+0x38>
 8003594:	4629      	mov	r1, r5
 8003596:	4638      	mov	r0, r7
 8003598:	47c0      	blx	r8
 800359a:	4306      	orrs	r6, r0
 800359c:	3568      	adds	r5, #104	@ 0x68
 800359e:	e7e9      	b.n	8003574 <_fwalk_sglue+0x10>

080035a0 <iprintf>:
 80035a0:	b40f      	push	{r0, r1, r2, r3}
 80035a2:	b507      	push	{r0, r1, r2, lr}
 80035a4:	4906      	ldr	r1, [pc, #24]	@ (80035c0 <iprintf+0x20>)
 80035a6:	ab04      	add	r3, sp, #16
 80035a8:	6808      	ldr	r0, [r1, #0]
 80035aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80035ae:	6881      	ldr	r1, [r0, #8]
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	f000 f9e9 	bl	8003988 <_vfiprintf_r>
 80035b6:	b003      	add	sp, #12
 80035b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035bc:	b004      	add	sp, #16
 80035be:	4770      	bx	lr
 80035c0:	20000018 	.word	0x20000018

080035c4 <__sread>:
 80035c4:	b510      	push	{r4, lr}
 80035c6:	460c      	mov	r4, r1
 80035c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035cc:	f000 f868 	bl	80036a0 <_read_r>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	bfab      	itete	ge
 80035d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80035d6:	89a3      	ldrhlt	r3, [r4, #12]
 80035d8:	181b      	addge	r3, r3, r0
 80035da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80035de:	bfac      	ite	ge
 80035e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80035e2:	81a3      	strhlt	r3, [r4, #12]
 80035e4:	bd10      	pop	{r4, pc}

080035e6 <__swrite>:
 80035e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ea:	461f      	mov	r7, r3
 80035ec:	898b      	ldrh	r3, [r1, #12]
 80035ee:	05db      	lsls	r3, r3, #23
 80035f0:	4605      	mov	r5, r0
 80035f2:	460c      	mov	r4, r1
 80035f4:	4616      	mov	r6, r2
 80035f6:	d505      	bpl.n	8003604 <__swrite+0x1e>
 80035f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035fc:	2302      	movs	r3, #2
 80035fe:	2200      	movs	r2, #0
 8003600:	f000 f83c 	bl	800367c <_lseek_r>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800360a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800360e:	81a3      	strh	r3, [r4, #12]
 8003610:	4632      	mov	r2, r6
 8003612:	463b      	mov	r3, r7
 8003614:	4628      	mov	r0, r5
 8003616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800361a:	f000 b853 	b.w	80036c4 <_write_r>

0800361e <__sseek>:
 800361e:	b510      	push	{r4, lr}
 8003620:	460c      	mov	r4, r1
 8003622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003626:	f000 f829 	bl	800367c <_lseek_r>
 800362a:	1c43      	adds	r3, r0, #1
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	bf15      	itete	ne
 8003630:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003632:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003636:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800363a:	81a3      	strheq	r3, [r4, #12]
 800363c:	bf18      	it	ne
 800363e:	81a3      	strhne	r3, [r4, #12]
 8003640:	bd10      	pop	{r4, pc}

08003642 <__sclose>:
 8003642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003646:	f000 b809 	b.w	800365c <_close_r>

0800364a <memset>:
 800364a:	4402      	add	r2, r0
 800364c:	4603      	mov	r3, r0
 800364e:	4293      	cmp	r3, r2
 8003650:	d100      	bne.n	8003654 <memset+0xa>
 8003652:	4770      	bx	lr
 8003654:	f803 1b01 	strb.w	r1, [r3], #1
 8003658:	e7f9      	b.n	800364e <memset+0x4>
	...

0800365c <_close_r>:
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4d06      	ldr	r5, [pc, #24]	@ (8003678 <_close_r+0x1c>)
 8003660:	2300      	movs	r3, #0
 8003662:	4604      	mov	r4, r0
 8003664:	4608      	mov	r0, r1
 8003666:	602b      	str	r3, [r5, #0]
 8003668:	f7fd fe13 	bl	8001292 <_close>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d102      	bne.n	8003676 <_close_r+0x1a>
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	b103      	cbz	r3, 8003676 <_close_r+0x1a>
 8003674:	6023      	str	r3, [r4, #0]
 8003676:	bd38      	pop	{r3, r4, r5, pc}
 8003678:	20000270 	.word	0x20000270

0800367c <_lseek_r>:
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4d07      	ldr	r5, [pc, #28]	@ (800369c <_lseek_r+0x20>)
 8003680:	4604      	mov	r4, r0
 8003682:	4608      	mov	r0, r1
 8003684:	4611      	mov	r1, r2
 8003686:	2200      	movs	r2, #0
 8003688:	602a      	str	r2, [r5, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	f7fd fe28 	bl	80012e0 <_lseek>
 8003690:	1c43      	adds	r3, r0, #1
 8003692:	d102      	bne.n	800369a <_lseek_r+0x1e>
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	b103      	cbz	r3, 800369a <_lseek_r+0x1e>
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	bd38      	pop	{r3, r4, r5, pc}
 800369c:	20000270 	.word	0x20000270

080036a0 <_read_r>:
 80036a0:	b538      	push	{r3, r4, r5, lr}
 80036a2:	4d07      	ldr	r5, [pc, #28]	@ (80036c0 <_read_r+0x20>)
 80036a4:	4604      	mov	r4, r0
 80036a6:	4608      	mov	r0, r1
 80036a8:	4611      	mov	r1, r2
 80036aa:	2200      	movs	r2, #0
 80036ac:	602a      	str	r2, [r5, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f7fd fdb6 	bl	8001220 <_read>
 80036b4:	1c43      	adds	r3, r0, #1
 80036b6:	d102      	bne.n	80036be <_read_r+0x1e>
 80036b8:	682b      	ldr	r3, [r5, #0]
 80036ba:	b103      	cbz	r3, 80036be <_read_r+0x1e>
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	bd38      	pop	{r3, r4, r5, pc}
 80036c0:	20000270 	.word	0x20000270

080036c4 <_write_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4d07      	ldr	r5, [pc, #28]	@ (80036e4 <_write_r+0x20>)
 80036c8:	4604      	mov	r4, r0
 80036ca:	4608      	mov	r0, r1
 80036cc:	4611      	mov	r1, r2
 80036ce:	2200      	movs	r2, #0
 80036d0:	602a      	str	r2, [r5, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f7fd fdc1 	bl	800125a <_write>
 80036d8:	1c43      	adds	r3, r0, #1
 80036da:	d102      	bne.n	80036e2 <_write_r+0x1e>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	b103      	cbz	r3, 80036e2 <_write_r+0x1e>
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	20000270 	.word	0x20000270

080036e8 <__errno>:
 80036e8:	4b01      	ldr	r3, [pc, #4]	@ (80036f0 <__errno+0x8>)
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000018 	.word	0x20000018

080036f4 <__libc_init_array>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	4d0d      	ldr	r5, [pc, #52]	@ (800372c <__libc_init_array+0x38>)
 80036f8:	4c0d      	ldr	r4, [pc, #52]	@ (8003730 <__libc_init_array+0x3c>)
 80036fa:	1b64      	subs	r4, r4, r5
 80036fc:	10a4      	asrs	r4, r4, #2
 80036fe:	2600      	movs	r6, #0
 8003700:	42a6      	cmp	r6, r4
 8003702:	d109      	bne.n	8003718 <__libc_init_array+0x24>
 8003704:	4d0b      	ldr	r5, [pc, #44]	@ (8003734 <__libc_init_array+0x40>)
 8003706:	4c0c      	ldr	r4, [pc, #48]	@ (8003738 <__libc_init_array+0x44>)
 8003708:	f000 fdb8 	bl	800427c <_init>
 800370c:	1b64      	subs	r4, r4, r5
 800370e:	10a4      	asrs	r4, r4, #2
 8003710:	2600      	movs	r6, #0
 8003712:	42a6      	cmp	r6, r4
 8003714:	d105      	bne.n	8003722 <__libc_init_array+0x2e>
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	f855 3b04 	ldr.w	r3, [r5], #4
 800371c:	4798      	blx	r3
 800371e:	3601      	adds	r6, #1
 8003720:	e7ee      	b.n	8003700 <__libc_init_array+0xc>
 8003722:	f855 3b04 	ldr.w	r3, [r5], #4
 8003726:	4798      	blx	r3
 8003728:	3601      	adds	r6, #1
 800372a:	e7f2      	b.n	8003712 <__libc_init_array+0x1e>
 800372c:	080042e4 	.word	0x080042e4
 8003730:	080042e4 	.word	0x080042e4
 8003734:	080042e4 	.word	0x080042e4
 8003738:	080042e8 	.word	0x080042e8

0800373c <__retarget_lock_init_recursive>:
 800373c:	4770      	bx	lr

0800373e <__retarget_lock_acquire_recursive>:
 800373e:	4770      	bx	lr

08003740 <__retarget_lock_release_recursive>:
 8003740:	4770      	bx	lr
	...

08003744 <_free_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4605      	mov	r5, r0
 8003748:	2900      	cmp	r1, #0
 800374a:	d041      	beq.n	80037d0 <_free_r+0x8c>
 800374c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003750:	1f0c      	subs	r4, r1, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	bfb8      	it	lt
 8003756:	18e4      	addlt	r4, r4, r3
 8003758:	f000 f8e0 	bl	800391c <__malloc_lock>
 800375c:	4a1d      	ldr	r2, [pc, #116]	@ (80037d4 <_free_r+0x90>)
 800375e:	6813      	ldr	r3, [r2, #0]
 8003760:	b933      	cbnz	r3, 8003770 <_free_r+0x2c>
 8003762:	6063      	str	r3, [r4, #4]
 8003764:	6014      	str	r4, [r2, #0]
 8003766:	4628      	mov	r0, r5
 8003768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800376c:	f000 b8dc 	b.w	8003928 <__malloc_unlock>
 8003770:	42a3      	cmp	r3, r4
 8003772:	d908      	bls.n	8003786 <_free_r+0x42>
 8003774:	6820      	ldr	r0, [r4, #0]
 8003776:	1821      	adds	r1, r4, r0
 8003778:	428b      	cmp	r3, r1
 800377a:	bf01      	itttt	eq
 800377c:	6819      	ldreq	r1, [r3, #0]
 800377e:	685b      	ldreq	r3, [r3, #4]
 8003780:	1809      	addeq	r1, r1, r0
 8003782:	6021      	streq	r1, [r4, #0]
 8003784:	e7ed      	b.n	8003762 <_free_r+0x1e>
 8003786:	461a      	mov	r2, r3
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	b10b      	cbz	r3, 8003790 <_free_r+0x4c>
 800378c:	42a3      	cmp	r3, r4
 800378e:	d9fa      	bls.n	8003786 <_free_r+0x42>
 8003790:	6811      	ldr	r1, [r2, #0]
 8003792:	1850      	adds	r0, r2, r1
 8003794:	42a0      	cmp	r0, r4
 8003796:	d10b      	bne.n	80037b0 <_free_r+0x6c>
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	4401      	add	r1, r0
 800379c:	1850      	adds	r0, r2, r1
 800379e:	4283      	cmp	r3, r0
 80037a0:	6011      	str	r1, [r2, #0]
 80037a2:	d1e0      	bne.n	8003766 <_free_r+0x22>
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	6053      	str	r3, [r2, #4]
 80037aa:	4408      	add	r0, r1
 80037ac:	6010      	str	r0, [r2, #0]
 80037ae:	e7da      	b.n	8003766 <_free_r+0x22>
 80037b0:	d902      	bls.n	80037b8 <_free_r+0x74>
 80037b2:	230c      	movs	r3, #12
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	e7d6      	b.n	8003766 <_free_r+0x22>
 80037b8:	6820      	ldr	r0, [r4, #0]
 80037ba:	1821      	adds	r1, r4, r0
 80037bc:	428b      	cmp	r3, r1
 80037be:	bf04      	itt	eq
 80037c0:	6819      	ldreq	r1, [r3, #0]
 80037c2:	685b      	ldreq	r3, [r3, #4]
 80037c4:	6063      	str	r3, [r4, #4]
 80037c6:	bf04      	itt	eq
 80037c8:	1809      	addeq	r1, r1, r0
 80037ca:	6021      	streq	r1, [r4, #0]
 80037cc:	6054      	str	r4, [r2, #4]
 80037ce:	e7ca      	b.n	8003766 <_free_r+0x22>
 80037d0:	bd38      	pop	{r3, r4, r5, pc}
 80037d2:	bf00      	nop
 80037d4:	2000027c 	.word	0x2000027c

080037d8 <sbrk_aligned>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	4e0f      	ldr	r6, [pc, #60]	@ (8003818 <sbrk_aligned+0x40>)
 80037dc:	460c      	mov	r4, r1
 80037de:	6831      	ldr	r1, [r6, #0]
 80037e0:	4605      	mov	r5, r0
 80037e2:	b911      	cbnz	r1, 80037ea <sbrk_aligned+0x12>
 80037e4:	f000 fcb6 	bl	8004154 <_sbrk_r>
 80037e8:	6030      	str	r0, [r6, #0]
 80037ea:	4621      	mov	r1, r4
 80037ec:	4628      	mov	r0, r5
 80037ee:	f000 fcb1 	bl	8004154 <_sbrk_r>
 80037f2:	1c43      	adds	r3, r0, #1
 80037f4:	d103      	bne.n	80037fe <sbrk_aligned+0x26>
 80037f6:	f04f 34ff 	mov.w	r4, #4294967295
 80037fa:	4620      	mov	r0, r4
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
 80037fe:	1cc4      	adds	r4, r0, #3
 8003800:	f024 0403 	bic.w	r4, r4, #3
 8003804:	42a0      	cmp	r0, r4
 8003806:	d0f8      	beq.n	80037fa <sbrk_aligned+0x22>
 8003808:	1a21      	subs	r1, r4, r0
 800380a:	4628      	mov	r0, r5
 800380c:	f000 fca2 	bl	8004154 <_sbrk_r>
 8003810:	3001      	adds	r0, #1
 8003812:	d1f2      	bne.n	80037fa <sbrk_aligned+0x22>
 8003814:	e7ef      	b.n	80037f6 <sbrk_aligned+0x1e>
 8003816:	bf00      	nop
 8003818:	20000278 	.word	0x20000278

0800381c <_malloc_r>:
 800381c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003820:	1ccd      	adds	r5, r1, #3
 8003822:	f025 0503 	bic.w	r5, r5, #3
 8003826:	3508      	adds	r5, #8
 8003828:	2d0c      	cmp	r5, #12
 800382a:	bf38      	it	cc
 800382c:	250c      	movcc	r5, #12
 800382e:	2d00      	cmp	r5, #0
 8003830:	4606      	mov	r6, r0
 8003832:	db01      	blt.n	8003838 <_malloc_r+0x1c>
 8003834:	42a9      	cmp	r1, r5
 8003836:	d904      	bls.n	8003842 <_malloc_r+0x26>
 8003838:	230c      	movs	r3, #12
 800383a:	6033      	str	r3, [r6, #0]
 800383c:	2000      	movs	r0, #0
 800383e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003918 <_malloc_r+0xfc>
 8003846:	f000 f869 	bl	800391c <__malloc_lock>
 800384a:	f8d8 3000 	ldr.w	r3, [r8]
 800384e:	461c      	mov	r4, r3
 8003850:	bb44      	cbnz	r4, 80038a4 <_malloc_r+0x88>
 8003852:	4629      	mov	r1, r5
 8003854:	4630      	mov	r0, r6
 8003856:	f7ff ffbf 	bl	80037d8 <sbrk_aligned>
 800385a:	1c43      	adds	r3, r0, #1
 800385c:	4604      	mov	r4, r0
 800385e:	d158      	bne.n	8003912 <_malloc_r+0xf6>
 8003860:	f8d8 4000 	ldr.w	r4, [r8]
 8003864:	4627      	mov	r7, r4
 8003866:	2f00      	cmp	r7, #0
 8003868:	d143      	bne.n	80038f2 <_malloc_r+0xd6>
 800386a:	2c00      	cmp	r4, #0
 800386c:	d04b      	beq.n	8003906 <_malloc_r+0xea>
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	4639      	mov	r1, r7
 8003872:	4630      	mov	r0, r6
 8003874:	eb04 0903 	add.w	r9, r4, r3
 8003878:	f000 fc6c 	bl	8004154 <_sbrk_r>
 800387c:	4581      	cmp	r9, r0
 800387e:	d142      	bne.n	8003906 <_malloc_r+0xea>
 8003880:	6821      	ldr	r1, [r4, #0]
 8003882:	1a6d      	subs	r5, r5, r1
 8003884:	4629      	mov	r1, r5
 8003886:	4630      	mov	r0, r6
 8003888:	f7ff ffa6 	bl	80037d8 <sbrk_aligned>
 800388c:	3001      	adds	r0, #1
 800388e:	d03a      	beq.n	8003906 <_malloc_r+0xea>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	442b      	add	r3, r5
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	f8d8 3000 	ldr.w	r3, [r8]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	bb62      	cbnz	r2, 80038f8 <_malloc_r+0xdc>
 800389e:	f8c8 7000 	str.w	r7, [r8]
 80038a2:	e00f      	b.n	80038c4 <_malloc_r+0xa8>
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	1b52      	subs	r2, r2, r5
 80038a8:	d420      	bmi.n	80038ec <_malloc_r+0xd0>
 80038aa:	2a0b      	cmp	r2, #11
 80038ac:	d917      	bls.n	80038de <_malloc_r+0xc2>
 80038ae:	1961      	adds	r1, r4, r5
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	6025      	str	r5, [r4, #0]
 80038b4:	bf18      	it	ne
 80038b6:	6059      	strne	r1, [r3, #4]
 80038b8:	6863      	ldr	r3, [r4, #4]
 80038ba:	bf08      	it	eq
 80038bc:	f8c8 1000 	streq.w	r1, [r8]
 80038c0:	5162      	str	r2, [r4, r5]
 80038c2:	604b      	str	r3, [r1, #4]
 80038c4:	4630      	mov	r0, r6
 80038c6:	f000 f82f 	bl	8003928 <__malloc_unlock>
 80038ca:	f104 000b 	add.w	r0, r4, #11
 80038ce:	1d23      	adds	r3, r4, #4
 80038d0:	f020 0007 	bic.w	r0, r0, #7
 80038d4:	1ac2      	subs	r2, r0, r3
 80038d6:	bf1c      	itt	ne
 80038d8:	1a1b      	subne	r3, r3, r0
 80038da:	50a3      	strne	r3, [r4, r2]
 80038dc:	e7af      	b.n	800383e <_malloc_r+0x22>
 80038de:	6862      	ldr	r2, [r4, #4]
 80038e0:	42a3      	cmp	r3, r4
 80038e2:	bf0c      	ite	eq
 80038e4:	f8c8 2000 	streq.w	r2, [r8]
 80038e8:	605a      	strne	r2, [r3, #4]
 80038ea:	e7eb      	b.n	80038c4 <_malloc_r+0xa8>
 80038ec:	4623      	mov	r3, r4
 80038ee:	6864      	ldr	r4, [r4, #4]
 80038f0:	e7ae      	b.n	8003850 <_malloc_r+0x34>
 80038f2:	463c      	mov	r4, r7
 80038f4:	687f      	ldr	r7, [r7, #4]
 80038f6:	e7b6      	b.n	8003866 <_malloc_r+0x4a>
 80038f8:	461a      	mov	r2, r3
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	42a3      	cmp	r3, r4
 80038fe:	d1fb      	bne.n	80038f8 <_malloc_r+0xdc>
 8003900:	2300      	movs	r3, #0
 8003902:	6053      	str	r3, [r2, #4]
 8003904:	e7de      	b.n	80038c4 <_malloc_r+0xa8>
 8003906:	230c      	movs	r3, #12
 8003908:	6033      	str	r3, [r6, #0]
 800390a:	4630      	mov	r0, r6
 800390c:	f000 f80c 	bl	8003928 <__malloc_unlock>
 8003910:	e794      	b.n	800383c <_malloc_r+0x20>
 8003912:	6005      	str	r5, [r0, #0]
 8003914:	e7d6      	b.n	80038c4 <_malloc_r+0xa8>
 8003916:	bf00      	nop
 8003918:	2000027c 	.word	0x2000027c

0800391c <__malloc_lock>:
 800391c:	4801      	ldr	r0, [pc, #4]	@ (8003924 <__malloc_lock+0x8>)
 800391e:	f7ff bf0e 	b.w	800373e <__retarget_lock_acquire_recursive>
 8003922:	bf00      	nop
 8003924:	20000274 	.word	0x20000274

08003928 <__malloc_unlock>:
 8003928:	4801      	ldr	r0, [pc, #4]	@ (8003930 <__malloc_unlock+0x8>)
 800392a:	f7ff bf09 	b.w	8003740 <__retarget_lock_release_recursive>
 800392e:	bf00      	nop
 8003930:	20000274 	.word	0x20000274

08003934 <__sfputc_r>:
 8003934:	6893      	ldr	r3, [r2, #8]
 8003936:	3b01      	subs	r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	b410      	push	{r4}
 800393c:	6093      	str	r3, [r2, #8]
 800393e:	da08      	bge.n	8003952 <__sfputc_r+0x1e>
 8003940:	6994      	ldr	r4, [r2, #24]
 8003942:	42a3      	cmp	r3, r4
 8003944:	db01      	blt.n	800394a <__sfputc_r+0x16>
 8003946:	290a      	cmp	r1, #10
 8003948:	d103      	bne.n	8003952 <__sfputc_r+0x1e>
 800394a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800394e:	f000 bb6d 	b.w	800402c <__swbuf_r>
 8003952:	6813      	ldr	r3, [r2, #0]
 8003954:	1c58      	adds	r0, r3, #1
 8003956:	6010      	str	r0, [r2, #0]
 8003958:	7019      	strb	r1, [r3, #0]
 800395a:	4608      	mov	r0, r1
 800395c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003960:	4770      	bx	lr

08003962 <__sfputs_r>:
 8003962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003964:	4606      	mov	r6, r0
 8003966:	460f      	mov	r7, r1
 8003968:	4614      	mov	r4, r2
 800396a:	18d5      	adds	r5, r2, r3
 800396c:	42ac      	cmp	r4, r5
 800396e:	d101      	bne.n	8003974 <__sfputs_r+0x12>
 8003970:	2000      	movs	r0, #0
 8003972:	e007      	b.n	8003984 <__sfputs_r+0x22>
 8003974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003978:	463a      	mov	r2, r7
 800397a:	4630      	mov	r0, r6
 800397c:	f7ff ffda 	bl	8003934 <__sfputc_r>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d1f3      	bne.n	800396c <__sfputs_r+0xa>
 8003984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003988 <_vfiprintf_r>:
 8003988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	460d      	mov	r5, r1
 800398e:	b09d      	sub	sp, #116	@ 0x74
 8003990:	4614      	mov	r4, r2
 8003992:	4698      	mov	r8, r3
 8003994:	4606      	mov	r6, r0
 8003996:	b118      	cbz	r0, 80039a0 <_vfiprintf_r+0x18>
 8003998:	6a03      	ldr	r3, [r0, #32]
 800399a:	b90b      	cbnz	r3, 80039a0 <_vfiprintf_r+0x18>
 800399c:	f7ff fdca 	bl	8003534 <__sinit>
 80039a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039a2:	07d9      	lsls	r1, r3, #31
 80039a4:	d405      	bmi.n	80039b2 <_vfiprintf_r+0x2a>
 80039a6:	89ab      	ldrh	r3, [r5, #12]
 80039a8:	059a      	lsls	r2, r3, #22
 80039aa:	d402      	bmi.n	80039b2 <_vfiprintf_r+0x2a>
 80039ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039ae:	f7ff fec6 	bl	800373e <__retarget_lock_acquire_recursive>
 80039b2:	89ab      	ldrh	r3, [r5, #12]
 80039b4:	071b      	lsls	r3, r3, #28
 80039b6:	d501      	bpl.n	80039bc <_vfiprintf_r+0x34>
 80039b8:	692b      	ldr	r3, [r5, #16]
 80039ba:	b99b      	cbnz	r3, 80039e4 <_vfiprintf_r+0x5c>
 80039bc:	4629      	mov	r1, r5
 80039be:	4630      	mov	r0, r6
 80039c0:	f000 fb72 	bl	80040a8 <__swsetup_r>
 80039c4:	b170      	cbz	r0, 80039e4 <_vfiprintf_r+0x5c>
 80039c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039c8:	07dc      	lsls	r4, r3, #31
 80039ca:	d504      	bpl.n	80039d6 <_vfiprintf_r+0x4e>
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	b01d      	add	sp, #116	@ 0x74
 80039d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d6:	89ab      	ldrh	r3, [r5, #12]
 80039d8:	0598      	lsls	r0, r3, #22
 80039da:	d4f7      	bmi.n	80039cc <_vfiprintf_r+0x44>
 80039dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039de:	f7ff feaf 	bl	8003740 <__retarget_lock_release_recursive>
 80039e2:	e7f3      	b.n	80039cc <_vfiprintf_r+0x44>
 80039e4:	2300      	movs	r3, #0
 80039e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80039e8:	2320      	movs	r3, #32
 80039ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80039f2:	2330      	movs	r3, #48	@ 0x30
 80039f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ba4 <_vfiprintf_r+0x21c>
 80039f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039fc:	f04f 0901 	mov.w	r9, #1
 8003a00:	4623      	mov	r3, r4
 8003a02:	469a      	mov	sl, r3
 8003a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a08:	b10a      	cbz	r2, 8003a0e <_vfiprintf_r+0x86>
 8003a0a:	2a25      	cmp	r2, #37	@ 0x25
 8003a0c:	d1f9      	bne.n	8003a02 <_vfiprintf_r+0x7a>
 8003a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8003a12:	d00b      	beq.n	8003a2c <_vfiprintf_r+0xa4>
 8003a14:	465b      	mov	r3, fp
 8003a16:	4622      	mov	r2, r4
 8003a18:	4629      	mov	r1, r5
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	f7ff ffa1 	bl	8003962 <__sfputs_r>
 8003a20:	3001      	adds	r0, #1
 8003a22:	f000 80a7 	beq.w	8003b74 <_vfiprintf_r+0x1ec>
 8003a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a28:	445a      	add	r2, fp
 8003a2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 809f 	beq.w	8003b74 <_vfiprintf_r+0x1ec>
 8003a36:	2300      	movs	r3, #0
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a40:	f10a 0a01 	add.w	sl, sl, #1
 8003a44:	9304      	str	r3, [sp, #16]
 8003a46:	9307      	str	r3, [sp, #28]
 8003a48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a4e:	4654      	mov	r4, sl
 8003a50:	2205      	movs	r2, #5
 8003a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a56:	4853      	ldr	r0, [pc, #332]	@ (8003ba4 <_vfiprintf_r+0x21c>)
 8003a58:	f7fc fbc2 	bl	80001e0 <memchr>
 8003a5c:	9a04      	ldr	r2, [sp, #16]
 8003a5e:	b9d8      	cbnz	r0, 8003a98 <_vfiprintf_r+0x110>
 8003a60:	06d1      	lsls	r1, r2, #27
 8003a62:	bf44      	itt	mi
 8003a64:	2320      	movmi	r3, #32
 8003a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a6a:	0713      	lsls	r3, r2, #28
 8003a6c:	bf44      	itt	mi
 8003a6e:	232b      	movmi	r3, #43	@ 0x2b
 8003a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a74:	f89a 3000 	ldrb.w	r3, [sl]
 8003a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a7a:	d015      	beq.n	8003aa8 <_vfiprintf_r+0x120>
 8003a7c:	9a07      	ldr	r2, [sp, #28]
 8003a7e:	4654      	mov	r4, sl
 8003a80:	2000      	movs	r0, #0
 8003a82:	f04f 0c0a 	mov.w	ip, #10
 8003a86:	4621      	mov	r1, r4
 8003a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a8c:	3b30      	subs	r3, #48	@ 0x30
 8003a8e:	2b09      	cmp	r3, #9
 8003a90:	d94b      	bls.n	8003b2a <_vfiprintf_r+0x1a2>
 8003a92:	b1b0      	cbz	r0, 8003ac2 <_vfiprintf_r+0x13a>
 8003a94:	9207      	str	r2, [sp, #28]
 8003a96:	e014      	b.n	8003ac2 <_vfiprintf_r+0x13a>
 8003a98:	eba0 0308 	sub.w	r3, r0, r8
 8003a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	9304      	str	r3, [sp, #16]
 8003aa4:	46a2      	mov	sl, r4
 8003aa6:	e7d2      	b.n	8003a4e <_vfiprintf_r+0xc6>
 8003aa8:	9b03      	ldr	r3, [sp, #12]
 8003aaa:	1d19      	adds	r1, r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	9103      	str	r1, [sp, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bfbb      	ittet	lt
 8003ab4:	425b      	neglt	r3, r3
 8003ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8003aba:	9307      	strge	r3, [sp, #28]
 8003abc:	9307      	strlt	r3, [sp, #28]
 8003abe:	bfb8      	it	lt
 8003ac0:	9204      	strlt	r2, [sp, #16]
 8003ac2:	7823      	ldrb	r3, [r4, #0]
 8003ac4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ac6:	d10a      	bne.n	8003ade <_vfiprintf_r+0x156>
 8003ac8:	7863      	ldrb	r3, [r4, #1]
 8003aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8003acc:	d132      	bne.n	8003b34 <_vfiprintf_r+0x1ac>
 8003ace:	9b03      	ldr	r3, [sp, #12]
 8003ad0:	1d1a      	adds	r2, r3, #4
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	9203      	str	r2, [sp, #12]
 8003ad6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ada:	3402      	adds	r4, #2
 8003adc:	9305      	str	r3, [sp, #20]
 8003ade:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003bb4 <_vfiprintf_r+0x22c>
 8003ae2:	7821      	ldrb	r1, [r4, #0]
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	4650      	mov	r0, sl
 8003ae8:	f7fc fb7a 	bl	80001e0 <memchr>
 8003aec:	b138      	cbz	r0, 8003afe <_vfiprintf_r+0x176>
 8003aee:	9b04      	ldr	r3, [sp, #16]
 8003af0:	eba0 000a 	sub.w	r0, r0, sl
 8003af4:	2240      	movs	r2, #64	@ 0x40
 8003af6:	4082      	lsls	r2, r0
 8003af8:	4313      	orrs	r3, r2
 8003afa:	3401      	adds	r4, #1
 8003afc:	9304      	str	r3, [sp, #16]
 8003afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b02:	4829      	ldr	r0, [pc, #164]	@ (8003ba8 <_vfiprintf_r+0x220>)
 8003b04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b08:	2206      	movs	r2, #6
 8003b0a:	f7fc fb69 	bl	80001e0 <memchr>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d03f      	beq.n	8003b92 <_vfiprintf_r+0x20a>
 8003b12:	4b26      	ldr	r3, [pc, #152]	@ (8003bac <_vfiprintf_r+0x224>)
 8003b14:	bb1b      	cbnz	r3, 8003b5e <_vfiprintf_r+0x1d6>
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	3307      	adds	r3, #7
 8003b1a:	f023 0307 	bic.w	r3, r3, #7
 8003b1e:	3308      	adds	r3, #8
 8003b20:	9303      	str	r3, [sp, #12]
 8003b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b24:	443b      	add	r3, r7
 8003b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b28:	e76a      	b.n	8003a00 <_vfiprintf_r+0x78>
 8003b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b2e:	460c      	mov	r4, r1
 8003b30:	2001      	movs	r0, #1
 8003b32:	e7a8      	b.n	8003a86 <_vfiprintf_r+0xfe>
 8003b34:	2300      	movs	r3, #0
 8003b36:	3401      	adds	r4, #1
 8003b38:	9305      	str	r3, [sp, #20]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f04f 0c0a 	mov.w	ip, #10
 8003b40:	4620      	mov	r0, r4
 8003b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b46:	3a30      	subs	r2, #48	@ 0x30
 8003b48:	2a09      	cmp	r2, #9
 8003b4a:	d903      	bls.n	8003b54 <_vfiprintf_r+0x1cc>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0c6      	beq.n	8003ade <_vfiprintf_r+0x156>
 8003b50:	9105      	str	r1, [sp, #20]
 8003b52:	e7c4      	b.n	8003ade <_vfiprintf_r+0x156>
 8003b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b58:	4604      	mov	r4, r0
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e7f0      	b.n	8003b40 <_vfiprintf_r+0x1b8>
 8003b5e:	ab03      	add	r3, sp, #12
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	462a      	mov	r2, r5
 8003b64:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <_vfiprintf_r+0x228>)
 8003b66:	a904      	add	r1, sp, #16
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f3af 8000 	nop.w
 8003b6e:	4607      	mov	r7, r0
 8003b70:	1c78      	adds	r0, r7, #1
 8003b72:	d1d6      	bne.n	8003b22 <_vfiprintf_r+0x19a>
 8003b74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b76:	07d9      	lsls	r1, r3, #31
 8003b78:	d405      	bmi.n	8003b86 <_vfiprintf_r+0x1fe>
 8003b7a:	89ab      	ldrh	r3, [r5, #12]
 8003b7c:	059a      	lsls	r2, r3, #22
 8003b7e:	d402      	bmi.n	8003b86 <_vfiprintf_r+0x1fe>
 8003b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b82:	f7ff fddd 	bl	8003740 <__retarget_lock_release_recursive>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	065b      	lsls	r3, r3, #25
 8003b8a:	f53f af1f 	bmi.w	80039cc <_vfiprintf_r+0x44>
 8003b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b90:	e71e      	b.n	80039d0 <_vfiprintf_r+0x48>
 8003b92:	ab03      	add	r3, sp, #12
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	462a      	mov	r2, r5
 8003b98:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <_vfiprintf_r+0x228>)
 8003b9a:	a904      	add	r1, sp, #16
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f000 f879 	bl	8003c94 <_printf_i>
 8003ba2:	e7e4      	b.n	8003b6e <_vfiprintf_r+0x1e6>
 8003ba4:	080042a8 	.word	0x080042a8
 8003ba8:	080042b2 	.word	0x080042b2
 8003bac:	00000000 	.word	0x00000000
 8003bb0:	08003963 	.word	0x08003963
 8003bb4:	080042ae 	.word	0x080042ae

08003bb8 <_printf_common>:
 8003bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	4616      	mov	r6, r2
 8003bbe:	4698      	mov	r8, r3
 8003bc0:	688a      	ldr	r2, [r1, #8]
 8003bc2:	690b      	ldr	r3, [r1, #16]
 8003bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bfb8      	it	lt
 8003bcc:	4613      	movlt	r3, r2
 8003bce:	6033      	str	r3, [r6, #0]
 8003bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bd4:	4607      	mov	r7, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	b10a      	cbz	r2, 8003bde <_printf_common+0x26>
 8003bda:	3301      	adds	r3, #1
 8003bdc:	6033      	str	r3, [r6, #0]
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	0699      	lsls	r1, r3, #26
 8003be2:	bf42      	ittt	mi
 8003be4:	6833      	ldrmi	r3, [r6, #0]
 8003be6:	3302      	addmi	r3, #2
 8003be8:	6033      	strmi	r3, [r6, #0]
 8003bea:	6825      	ldr	r5, [r4, #0]
 8003bec:	f015 0506 	ands.w	r5, r5, #6
 8003bf0:	d106      	bne.n	8003c00 <_printf_common+0x48>
 8003bf2:	f104 0a19 	add.w	sl, r4, #25
 8003bf6:	68e3      	ldr	r3, [r4, #12]
 8003bf8:	6832      	ldr	r2, [r6, #0]
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	42ab      	cmp	r3, r5
 8003bfe:	dc26      	bgt.n	8003c4e <_printf_common+0x96>
 8003c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c04:	6822      	ldr	r2, [r4, #0]
 8003c06:	3b00      	subs	r3, #0
 8003c08:	bf18      	it	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	0692      	lsls	r2, r2, #26
 8003c0e:	d42b      	bmi.n	8003c68 <_printf_common+0xb0>
 8003c10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c14:	4641      	mov	r1, r8
 8003c16:	4638      	mov	r0, r7
 8003c18:	47c8      	blx	r9
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d01e      	beq.n	8003c5c <_printf_common+0xa4>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	6922      	ldr	r2, [r4, #16]
 8003c22:	f003 0306 	and.w	r3, r3, #6
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	bf02      	ittt	eq
 8003c2a:	68e5      	ldreq	r5, [r4, #12]
 8003c2c:	6833      	ldreq	r3, [r6, #0]
 8003c2e:	1aed      	subeq	r5, r5, r3
 8003c30:	68a3      	ldr	r3, [r4, #8]
 8003c32:	bf0c      	ite	eq
 8003c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c38:	2500      	movne	r5, #0
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	bfc4      	itt	gt
 8003c3e:	1a9b      	subgt	r3, r3, r2
 8003c40:	18ed      	addgt	r5, r5, r3
 8003c42:	2600      	movs	r6, #0
 8003c44:	341a      	adds	r4, #26
 8003c46:	42b5      	cmp	r5, r6
 8003c48:	d11a      	bne.n	8003c80 <_printf_common+0xc8>
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	e008      	b.n	8003c60 <_printf_common+0xa8>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	4652      	mov	r2, sl
 8003c52:	4641      	mov	r1, r8
 8003c54:	4638      	mov	r0, r7
 8003c56:	47c8      	blx	r9
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d103      	bne.n	8003c64 <_printf_common+0xac>
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c64:	3501      	adds	r5, #1
 8003c66:	e7c6      	b.n	8003bf6 <_printf_common+0x3e>
 8003c68:	18e1      	adds	r1, r4, r3
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	2030      	movs	r0, #48	@ 0x30
 8003c6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c72:	4422      	add	r2, r4
 8003c74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	e7c7      	b.n	8003c10 <_printf_common+0x58>
 8003c80:	2301      	movs	r3, #1
 8003c82:	4622      	mov	r2, r4
 8003c84:	4641      	mov	r1, r8
 8003c86:	4638      	mov	r0, r7
 8003c88:	47c8      	blx	r9
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d0e6      	beq.n	8003c5c <_printf_common+0xa4>
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7d9      	b.n	8003c46 <_printf_common+0x8e>
	...

08003c94 <_printf_i>:
 8003c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c98:	7e0f      	ldrb	r7, [r1, #24]
 8003c9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c9c:	2f78      	cmp	r7, #120	@ 0x78
 8003c9e:	4691      	mov	r9, r2
 8003ca0:	4680      	mov	r8, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	469a      	mov	sl, r3
 8003ca6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003caa:	d807      	bhi.n	8003cbc <_printf_i+0x28>
 8003cac:	2f62      	cmp	r7, #98	@ 0x62
 8003cae:	d80a      	bhi.n	8003cc6 <_printf_i+0x32>
 8003cb0:	2f00      	cmp	r7, #0
 8003cb2:	f000 80d2 	beq.w	8003e5a <_printf_i+0x1c6>
 8003cb6:	2f58      	cmp	r7, #88	@ 0x58
 8003cb8:	f000 80b9 	beq.w	8003e2e <_printf_i+0x19a>
 8003cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cc4:	e03a      	b.n	8003d3c <_printf_i+0xa8>
 8003cc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cca:	2b15      	cmp	r3, #21
 8003ccc:	d8f6      	bhi.n	8003cbc <_printf_i+0x28>
 8003cce:	a101      	add	r1, pc, #4	@ (adr r1, 8003cd4 <_printf_i+0x40>)
 8003cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cd4:	08003d2d 	.word	0x08003d2d
 8003cd8:	08003d41 	.word	0x08003d41
 8003cdc:	08003cbd 	.word	0x08003cbd
 8003ce0:	08003cbd 	.word	0x08003cbd
 8003ce4:	08003cbd 	.word	0x08003cbd
 8003ce8:	08003cbd 	.word	0x08003cbd
 8003cec:	08003d41 	.word	0x08003d41
 8003cf0:	08003cbd 	.word	0x08003cbd
 8003cf4:	08003cbd 	.word	0x08003cbd
 8003cf8:	08003cbd 	.word	0x08003cbd
 8003cfc:	08003cbd 	.word	0x08003cbd
 8003d00:	08003e41 	.word	0x08003e41
 8003d04:	08003d6b 	.word	0x08003d6b
 8003d08:	08003dfb 	.word	0x08003dfb
 8003d0c:	08003cbd 	.word	0x08003cbd
 8003d10:	08003cbd 	.word	0x08003cbd
 8003d14:	08003e63 	.word	0x08003e63
 8003d18:	08003cbd 	.word	0x08003cbd
 8003d1c:	08003d6b 	.word	0x08003d6b
 8003d20:	08003cbd 	.word	0x08003cbd
 8003d24:	08003cbd 	.word	0x08003cbd
 8003d28:	08003e03 	.word	0x08003e03
 8003d2c:	6833      	ldr	r3, [r6, #0]
 8003d2e:	1d1a      	adds	r2, r3, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6032      	str	r2, [r6, #0]
 8003d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e09d      	b.n	8003e7c <_printf_i+0x1e8>
 8003d40:	6833      	ldr	r3, [r6, #0]
 8003d42:	6820      	ldr	r0, [r4, #0]
 8003d44:	1d19      	adds	r1, r3, #4
 8003d46:	6031      	str	r1, [r6, #0]
 8003d48:	0606      	lsls	r6, r0, #24
 8003d4a:	d501      	bpl.n	8003d50 <_printf_i+0xbc>
 8003d4c:	681d      	ldr	r5, [r3, #0]
 8003d4e:	e003      	b.n	8003d58 <_printf_i+0xc4>
 8003d50:	0645      	lsls	r5, r0, #25
 8003d52:	d5fb      	bpl.n	8003d4c <_printf_i+0xb8>
 8003d54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d58:	2d00      	cmp	r5, #0
 8003d5a:	da03      	bge.n	8003d64 <_printf_i+0xd0>
 8003d5c:	232d      	movs	r3, #45	@ 0x2d
 8003d5e:	426d      	negs	r5, r5
 8003d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d64:	4859      	ldr	r0, [pc, #356]	@ (8003ecc <_printf_i+0x238>)
 8003d66:	230a      	movs	r3, #10
 8003d68:	e011      	b.n	8003d8e <_printf_i+0xfa>
 8003d6a:	6821      	ldr	r1, [r4, #0]
 8003d6c:	6833      	ldr	r3, [r6, #0]
 8003d6e:	0608      	lsls	r0, r1, #24
 8003d70:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d74:	d402      	bmi.n	8003d7c <_printf_i+0xe8>
 8003d76:	0649      	lsls	r1, r1, #25
 8003d78:	bf48      	it	mi
 8003d7a:	b2ad      	uxthmi	r5, r5
 8003d7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d7e:	4853      	ldr	r0, [pc, #332]	@ (8003ecc <_printf_i+0x238>)
 8003d80:	6033      	str	r3, [r6, #0]
 8003d82:	bf14      	ite	ne
 8003d84:	230a      	movne	r3, #10
 8003d86:	2308      	moveq	r3, #8
 8003d88:	2100      	movs	r1, #0
 8003d8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d8e:	6866      	ldr	r6, [r4, #4]
 8003d90:	60a6      	str	r6, [r4, #8]
 8003d92:	2e00      	cmp	r6, #0
 8003d94:	bfa2      	ittt	ge
 8003d96:	6821      	ldrge	r1, [r4, #0]
 8003d98:	f021 0104 	bicge.w	r1, r1, #4
 8003d9c:	6021      	strge	r1, [r4, #0]
 8003d9e:	b90d      	cbnz	r5, 8003da4 <_printf_i+0x110>
 8003da0:	2e00      	cmp	r6, #0
 8003da2:	d04b      	beq.n	8003e3c <_printf_i+0x1a8>
 8003da4:	4616      	mov	r6, r2
 8003da6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003daa:	fb03 5711 	mls	r7, r3, r1, r5
 8003dae:	5dc7      	ldrb	r7, [r0, r7]
 8003db0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003db4:	462f      	mov	r7, r5
 8003db6:	42bb      	cmp	r3, r7
 8003db8:	460d      	mov	r5, r1
 8003dba:	d9f4      	bls.n	8003da6 <_printf_i+0x112>
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d10b      	bne.n	8003dd8 <_printf_i+0x144>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	07df      	lsls	r7, r3, #31
 8003dc4:	d508      	bpl.n	8003dd8 <_printf_i+0x144>
 8003dc6:	6923      	ldr	r3, [r4, #16]
 8003dc8:	6861      	ldr	r1, [r4, #4]
 8003dca:	4299      	cmp	r1, r3
 8003dcc:	bfde      	ittt	le
 8003dce:	2330      	movle	r3, #48	@ 0x30
 8003dd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dd8:	1b92      	subs	r2, r2, r6
 8003dda:	6122      	str	r2, [r4, #16]
 8003ddc:	f8cd a000 	str.w	sl, [sp]
 8003de0:	464b      	mov	r3, r9
 8003de2:	aa03      	add	r2, sp, #12
 8003de4:	4621      	mov	r1, r4
 8003de6:	4640      	mov	r0, r8
 8003de8:	f7ff fee6 	bl	8003bb8 <_printf_common>
 8003dec:	3001      	adds	r0, #1
 8003dee:	d14a      	bne.n	8003e86 <_printf_i+0x1f2>
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	b004      	add	sp, #16
 8003df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f043 0320 	orr.w	r3, r3, #32
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	4833      	ldr	r0, [pc, #204]	@ (8003ed0 <_printf_i+0x23c>)
 8003e04:	2778      	movs	r7, #120	@ 0x78
 8003e06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	6831      	ldr	r1, [r6, #0]
 8003e0e:	061f      	lsls	r7, r3, #24
 8003e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e14:	d402      	bmi.n	8003e1c <_printf_i+0x188>
 8003e16:	065f      	lsls	r7, r3, #25
 8003e18:	bf48      	it	mi
 8003e1a:	b2ad      	uxthmi	r5, r5
 8003e1c:	6031      	str	r1, [r6, #0]
 8003e1e:	07d9      	lsls	r1, r3, #31
 8003e20:	bf44      	itt	mi
 8003e22:	f043 0320 	orrmi.w	r3, r3, #32
 8003e26:	6023      	strmi	r3, [r4, #0]
 8003e28:	b11d      	cbz	r5, 8003e32 <_printf_i+0x19e>
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	e7ac      	b.n	8003d88 <_printf_i+0xf4>
 8003e2e:	4827      	ldr	r0, [pc, #156]	@ (8003ecc <_printf_i+0x238>)
 8003e30:	e7e9      	b.n	8003e06 <_printf_i+0x172>
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	f023 0320 	bic.w	r3, r3, #32
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	e7f6      	b.n	8003e2a <_printf_i+0x196>
 8003e3c:	4616      	mov	r6, r2
 8003e3e:	e7bd      	b.n	8003dbc <_printf_i+0x128>
 8003e40:	6833      	ldr	r3, [r6, #0]
 8003e42:	6825      	ldr	r5, [r4, #0]
 8003e44:	6961      	ldr	r1, [r4, #20]
 8003e46:	1d18      	adds	r0, r3, #4
 8003e48:	6030      	str	r0, [r6, #0]
 8003e4a:	062e      	lsls	r6, r5, #24
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	d501      	bpl.n	8003e54 <_printf_i+0x1c0>
 8003e50:	6019      	str	r1, [r3, #0]
 8003e52:	e002      	b.n	8003e5a <_printf_i+0x1c6>
 8003e54:	0668      	lsls	r0, r5, #25
 8003e56:	d5fb      	bpl.n	8003e50 <_printf_i+0x1bc>
 8003e58:	8019      	strh	r1, [r3, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	6123      	str	r3, [r4, #16]
 8003e5e:	4616      	mov	r6, r2
 8003e60:	e7bc      	b.n	8003ddc <_printf_i+0x148>
 8003e62:	6833      	ldr	r3, [r6, #0]
 8003e64:	1d1a      	adds	r2, r3, #4
 8003e66:	6032      	str	r2, [r6, #0]
 8003e68:	681e      	ldr	r6, [r3, #0]
 8003e6a:	6862      	ldr	r2, [r4, #4]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f7fc f9b6 	bl	80001e0 <memchr>
 8003e74:	b108      	cbz	r0, 8003e7a <_printf_i+0x1e6>
 8003e76:	1b80      	subs	r0, r0, r6
 8003e78:	6060      	str	r0, [r4, #4]
 8003e7a:	6863      	ldr	r3, [r4, #4]
 8003e7c:	6123      	str	r3, [r4, #16]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e84:	e7aa      	b.n	8003ddc <_printf_i+0x148>
 8003e86:	6923      	ldr	r3, [r4, #16]
 8003e88:	4632      	mov	r2, r6
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	47d0      	blx	sl
 8003e90:	3001      	adds	r0, #1
 8003e92:	d0ad      	beq.n	8003df0 <_printf_i+0x15c>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	079b      	lsls	r3, r3, #30
 8003e98:	d413      	bmi.n	8003ec2 <_printf_i+0x22e>
 8003e9a:	68e0      	ldr	r0, [r4, #12]
 8003e9c:	9b03      	ldr	r3, [sp, #12]
 8003e9e:	4298      	cmp	r0, r3
 8003ea0:	bfb8      	it	lt
 8003ea2:	4618      	movlt	r0, r3
 8003ea4:	e7a6      	b.n	8003df4 <_printf_i+0x160>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4632      	mov	r2, r6
 8003eaa:	4649      	mov	r1, r9
 8003eac:	4640      	mov	r0, r8
 8003eae:	47d0      	blx	sl
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d09d      	beq.n	8003df0 <_printf_i+0x15c>
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	68e3      	ldr	r3, [r4, #12]
 8003eb8:	9903      	ldr	r1, [sp, #12]
 8003eba:	1a5b      	subs	r3, r3, r1
 8003ebc:	42ab      	cmp	r3, r5
 8003ebe:	dcf2      	bgt.n	8003ea6 <_printf_i+0x212>
 8003ec0:	e7eb      	b.n	8003e9a <_printf_i+0x206>
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	f104 0619 	add.w	r6, r4, #25
 8003ec8:	e7f5      	b.n	8003eb6 <_printf_i+0x222>
 8003eca:	bf00      	nop
 8003ecc:	080042b9 	.word	0x080042b9
 8003ed0:	080042ca 	.word	0x080042ca

08003ed4 <__sflush_r>:
 8003ed4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003edc:	0716      	lsls	r6, r2, #28
 8003ede:	4605      	mov	r5, r0
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	d454      	bmi.n	8003f8e <__sflush_r+0xba>
 8003ee4:	684b      	ldr	r3, [r1, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	dc02      	bgt.n	8003ef0 <__sflush_r+0x1c>
 8003eea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	dd48      	ble.n	8003f82 <__sflush_r+0xae>
 8003ef0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ef2:	2e00      	cmp	r6, #0
 8003ef4:	d045      	beq.n	8003f82 <__sflush_r+0xae>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003efc:	682f      	ldr	r7, [r5, #0]
 8003efe:	6a21      	ldr	r1, [r4, #32]
 8003f00:	602b      	str	r3, [r5, #0]
 8003f02:	d030      	beq.n	8003f66 <__sflush_r+0x92>
 8003f04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	0759      	lsls	r1, r3, #29
 8003f0a:	d505      	bpl.n	8003f18 <__sflush_r+0x44>
 8003f0c:	6863      	ldr	r3, [r4, #4]
 8003f0e:	1ad2      	subs	r2, r2, r3
 8003f10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f12:	b10b      	cbz	r3, 8003f18 <__sflush_r+0x44>
 8003f14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f16:	1ad2      	subs	r2, r2, r3
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f1c:	6a21      	ldr	r1, [r4, #32]
 8003f1e:	4628      	mov	r0, r5
 8003f20:	47b0      	blx	r6
 8003f22:	1c43      	adds	r3, r0, #1
 8003f24:	89a3      	ldrh	r3, [r4, #12]
 8003f26:	d106      	bne.n	8003f36 <__sflush_r+0x62>
 8003f28:	6829      	ldr	r1, [r5, #0]
 8003f2a:	291d      	cmp	r1, #29
 8003f2c:	d82b      	bhi.n	8003f86 <__sflush_r+0xb2>
 8003f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd8 <__sflush_r+0x104>)
 8003f30:	410a      	asrs	r2, r1
 8003f32:	07d6      	lsls	r6, r2, #31
 8003f34:	d427      	bmi.n	8003f86 <__sflush_r+0xb2>
 8003f36:	2200      	movs	r2, #0
 8003f38:	6062      	str	r2, [r4, #4]
 8003f3a:	04d9      	lsls	r1, r3, #19
 8003f3c:	6922      	ldr	r2, [r4, #16]
 8003f3e:	6022      	str	r2, [r4, #0]
 8003f40:	d504      	bpl.n	8003f4c <__sflush_r+0x78>
 8003f42:	1c42      	adds	r2, r0, #1
 8003f44:	d101      	bne.n	8003f4a <__sflush_r+0x76>
 8003f46:	682b      	ldr	r3, [r5, #0]
 8003f48:	b903      	cbnz	r3, 8003f4c <__sflush_r+0x78>
 8003f4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f4e:	602f      	str	r7, [r5, #0]
 8003f50:	b1b9      	cbz	r1, 8003f82 <__sflush_r+0xae>
 8003f52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f56:	4299      	cmp	r1, r3
 8003f58:	d002      	beq.n	8003f60 <__sflush_r+0x8c>
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f7ff fbf2 	bl	8003744 <_free_r>
 8003f60:	2300      	movs	r3, #0
 8003f62:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f64:	e00d      	b.n	8003f82 <__sflush_r+0xae>
 8003f66:	2301      	movs	r3, #1
 8003f68:	4628      	mov	r0, r5
 8003f6a:	47b0      	blx	r6
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	1c50      	adds	r0, r2, #1
 8003f70:	d1c9      	bne.n	8003f06 <__sflush_r+0x32>
 8003f72:	682b      	ldr	r3, [r5, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0c6      	beq.n	8003f06 <__sflush_r+0x32>
 8003f78:	2b1d      	cmp	r3, #29
 8003f7a:	d001      	beq.n	8003f80 <__sflush_r+0xac>
 8003f7c:	2b16      	cmp	r3, #22
 8003f7e:	d11e      	bne.n	8003fbe <__sflush_r+0xea>
 8003f80:	602f      	str	r7, [r5, #0]
 8003f82:	2000      	movs	r0, #0
 8003f84:	e022      	b.n	8003fcc <__sflush_r+0xf8>
 8003f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f8a:	b21b      	sxth	r3, r3
 8003f8c:	e01b      	b.n	8003fc6 <__sflush_r+0xf2>
 8003f8e:	690f      	ldr	r7, [r1, #16]
 8003f90:	2f00      	cmp	r7, #0
 8003f92:	d0f6      	beq.n	8003f82 <__sflush_r+0xae>
 8003f94:	0793      	lsls	r3, r2, #30
 8003f96:	680e      	ldr	r6, [r1, #0]
 8003f98:	bf08      	it	eq
 8003f9a:	694b      	ldreq	r3, [r1, #20]
 8003f9c:	600f      	str	r7, [r1, #0]
 8003f9e:	bf18      	it	ne
 8003fa0:	2300      	movne	r3, #0
 8003fa2:	eba6 0807 	sub.w	r8, r6, r7
 8003fa6:	608b      	str	r3, [r1, #8]
 8003fa8:	f1b8 0f00 	cmp.w	r8, #0
 8003fac:	dde9      	ble.n	8003f82 <__sflush_r+0xae>
 8003fae:	6a21      	ldr	r1, [r4, #32]
 8003fb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003fb2:	4643      	mov	r3, r8
 8003fb4:	463a      	mov	r2, r7
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	47b0      	blx	r6
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	dc08      	bgt.n	8003fd0 <__sflush_r+0xfc>
 8003fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc6:	81a3      	strh	r3, [r4, #12]
 8003fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd0:	4407      	add	r7, r0
 8003fd2:	eba8 0800 	sub.w	r8, r8, r0
 8003fd6:	e7e7      	b.n	8003fa8 <__sflush_r+0xd4>
 8003fd8:	dfbffffe 	.word	0xdfbffffe

08003fdc <_fflush_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	690b      	ldr	r3, [r1, #16]
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	b913      	cbnz	r3, 8003fec <_fflush_r+0x10>
 8003fe6:	2500      	movs	r5, #0
 8003fe8:	4628      	mov	r0, r5
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	b118      	cbz	r0, 8003ff6 <_fflush_r+0x1a>
 8003fee:	6a03      	ldr	r3, [r0, #32]
 8003ff0:	b90b      	cbnz	r3, 8003ff6 <_fflush_r+0x1a>
 8003ff2:	f7ff fa9f 	bl	8003534 <__sinit>
 8003ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f3      	beq.n	8003fe6 <_fflush_r+0xa>
 8003ffe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004000:	07d0      	lsls	r0, r2, #31
 8004002:	d404      	bmi.n	800400e <_fflush_r+0x32>
 8004004:	0599      	lsls	r1, r3, #22
 8004006:	d402      	bmi.n	800400e <_fflush_r+0x32>
 8004008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800400a:	f7ff fb98 	bl	800373e <__retarget_lock_acquire_recursive>
 800400e:	4628      	mov	r0, r5
 8004010:	4621      	mov	r1, r4
 8004012:	f7ff ff5f 	bl	8003ed4 <__sflush_r>
 8004016:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004018:	07da      	lsls	r2, r3, #31
 800401a:	4605      	mov	r5, r0
 800401c:	d4e4      	bmi.n	8003fe8 <_fflush_r+0xc>
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	059b      	lsls	r3, r3, #22
 8004022:	d4e1      	bmi.n	8003fe8 <_fflush_r+0xc>
 8004024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004026:	f7ff fb8b 	bl	8003740 <__retarget_lock_release_recursive>
 800402a:	e7dd      	b.n	8003fe8 <_fflush_r+0xc>

0800402c <__swbuf_r>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	460e      	mov	r6, r1
 8004030:	4614      	mov	r4, r2
 8004032:	4605      	mov	r5, r0
 8004034:	b118      	cbz	r0, 800403e <__swbuf_r+0x12>
 8004036:	6a03      	ldr	r3, [r0, #32]
 8004038:	b90b      	cbnz	r3, 800403e <__swbuf_r+0x12>
 800403a:	f7ff fa7b 	bl	8003534 <__sinit>
 800403e:	69a3      	ldr	r3, [r4, #24]
 8004040:	60a3      	str	r3, [r4, #8]
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	071a      	lsls	r2, r3, #28
 8004046:	d501      	bpl.n	800404c <__swbuf_r+0x20>
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	b943      	cbnz	r3, 800405e <__swbuf_r+0x32>
 800404c:	4621      	mov	r1, r4
 800404e:	4628      	mov	r0, r5
 8004050:	f000 f82a 	bl	80040a8 <__swsetup_r>
 8004054:	b118      	cbz	r0, 800405e <__swbuf_r+0x32>
 8004056:	f04f 37ff 	mov.w	r7, #4294967295
 800405a:	4638      	mov	r0, r7
 800405c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	6922      	ldr	r2, [r4, #16]
 8004062:	1a98      	subs	r0, r3, r2
 8004064:	6963      	ldr	r3, [r4, #20]
 8004066:	b2f6      	uxtb	r6, r6
 8004068:	4283      	cmp	r3, r0
 800406a:	4637      	mov	r7, r6
 800406c:	dc05      	bgt.n	800407a <__swbuf_r+0x4e>
 800406e:	4621      	mov	r1, r4
 8004070:	4628      	mov	r0, r5
 8004072:	f7ff ffb3 	bl	8003fdc <_fflush_r>
 8004076:	2800      	cmp	r0, #0
 8004078:	d1ed      	bne.n	8004056 <__swbuf_r+0x2a>
 800407a:	68a3      	ldr	r3, [r4, #8]
 800407c:	3b01      	subs	r3, #1
 800407e:	60a3      	str	r3, [r4, #8]
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	6022      	str	r2, [r4, #0]
 8004086:	701e      	strb	r6, [r3, #0]
 8004088:	6962      	ldr	r2, [r4, #20]
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	429a      	cmp	r2, r3
 800408e:	d004      	beq.n	800409a <__swbuf_r+0x6e>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	07db      	lsls	r3, r3, #31
 8004094:	d5e1      	bpl.n	800405a <__swbuf_r+0x2e>
 8004096:	2e0a      	cmp	r6, #10
 8004098:	d1df      	bne.n	800405a <__swbuf_r+0x2e>
 800409a:	4621      	mov	r1, r4
 800409c:	4628      	mov	r0, r5
 800409e:	f7ff ff9d 	bl	8003fdc <_fflush_r>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d0d9      	beq.n	800405a <__swbuf_r+0x2e>
 80040a6:	e7d6      	b.n	8004056 <__swbuf_r+0x2a>

080040a8 <__swsetup_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4b29      	ldr	r3, [pc, #164]	@ (8004150 <__swsetup_r+0xa8>)
 80040ac:	4605      	mov	r5, r0
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	460c      	mov	r4, r1
 80040b2:	b118      	cbz	r0, 80040bc <__swsetup_r+0x14>
 80040b4:	6a03      	ldr	r3, [r0, #32]
 80040b6:	b90b      	cbnz	r3, 80040bc <__swsetup_r+0x14>
 80040b8:	f7ff fa3c 	bl	8003534 <__sinit>
 80040bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040c0:	0719      	lsls	r1, r3, #28
 80040c2:	d422      	bmi.n	800410a <__swsetup_r+0x62>
 80040c4:	06da      	lsls	r2, r3, #27
 80040c6:	d407      	bmi.n	80040d8 <__swsetup_r+0x30>
 80040c8:	2209      	movs	r2, #9
 80040ca:	602a      	str	r2, [r5, #0]
 80040cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040d0:	81a3      	strh	r3, [r4, #12]
 80040d2:	f04f 30ff 	mov.w	r0, #4294967295
 80040d6:	e033      	b.n	8004140 <__swsetup_r+0x98>
 80040d8:	0758      	lsls	r0, r3, #29
 80040da:	d512      	bpl.n	8004102 <__swsetup_r+0x5a>
 80040dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040de:	b141      	cbz	r1, 80040f2 <__swsetup_r+0x4a>
 80040e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040e4:	4299      	cmp	r1, r3
 80040e6:	d002      	beq.n	80040ee <__swsetup_r+0x46>
 80040e8:	4628      	mov	r0, r5
 80040ea:	f7ff fb2b 	bl	8003744 <_free_r>
 80040ee:	2300      	movs	r3, #0
 80040f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80040f8:	81a3      	strh	r3, [r4, #12]
 80040fa:	2300      	movs	r3, #0
 80040fc:	6063      	str	r3, [r4, #4]
 80040fe:	6923      	ldr	r3, [r4, #16]
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	89a3      	ldrh	r3, [r4, #12]
 8004104:	f043 0308 	orr.w	r3, r3, #8
 8004108:	81a3      	strh	r3, [r4, #12]
 800410a:	6923      	ldr	r3, [r4, #16]
 800410c:	b94b      	cbnz	r3, 8004122 <__swsetup_r+0x7a>
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004118:	d003      	beq.n	8004122 <__swsetup_r+0x7a>
 800411a:	4621      	mov	r1, r4
 800411c:	4628      	mov	r0, r5
 800411e:	f000 f84f 	bl	80041c0 <__smakebuf_r>
 8004122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004126:	f013 0201 	ands.w	r2, r3, #1
 800412a:	d00a      	beq.n	8004142 <__swsetup_r+0x9a>
 800412c:	2200      	movs	r2, #0
 800412e:	60a2      	str	r2, [r4, #8]
 8004130:	6962      	ldr	r2, [r4, #20]
 8004132:	4252      	negs	r2, r2
 8004134:	61a2      	str	r2, [r4, #24]
 8004136:	6922      	ldr	r2, [r4, #16]
 8004138:	b942      	cbnz	r2, 800414c <__swsetup_r+0xa4>
 800413a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800413e:	d1c5      	bne.n	80040cc <__swsetup_r+0x24>
 8004140:	bd38      	pop	{r3, r4, r5, pc}
 8004142:	0799      	lsls	r1, r3, #30
 8004144:	bf58      	it	pl
 8004146:	6962      	ldrpl	r2, [r4, #20]
 8004148:	60a2      	str	r2, [r4, #8]
 800414a:	e7f4      	b.n	8004136 <__swsetup_r+0x8e>
 800414c:	2000      	movs	r0, #0
 800414e:	e7f7      	b.n	8004140 <__swsetup_r+0x98>
 8004150:	20000018 	.word	0x20000018

08004154 <_sbrk_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4d06      	ldr	r5, [pc, #24]	@ (8004170 <_sbrk_r+0x1c>)
 8004158:	2300      	movs	r3, #0
 800415a:	4604      	mov	r4, r0
 800415c:	4608      	mov	r0, r1
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	f7fd f8cc 	bl	80012fc <_sbrk>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <_sbrk_r+0x1a>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b103      	cbz	r3, 800416e <_sbrk_r+0x1a>
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	20000270 	.word	0x20000270

08004174 <__swhatbuf_r>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	460c      	mov	r4, r1
 8004178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800417c:	2900      	cmp	r1, #0
 800417e:	b096      	sub	sp, #88	@ 0x58
 8004180:	4615      	mov	r5, r2
 8004182:	461e      	mov	r6, r3
 8004184:	da0d      	bge.n	80041a2 <__swhatbuf_r+0x2e>
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800418c:	f04f 0100 	mov.w	r1, #0
 8004190:	bf14      	ite	ne
 8004192:	2340      	movne	r3, #64	@ 0x40
 8004194:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004198:	2000      	movs	r0, #0
 800419a:	6031      	str	r1, [r6, #0]
 800419c:	602b      	str	r3, [r5, #0]
 800419e:	b016      	add	sp, #88	@ 0x58
 80041a0:	bd70      	pop	{r4, r5, r6, pc}
 80041a2:	466a      	mov	r2, sp
 80041a4:	f000 f848 	bl	8004238 <_fstat_r>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	dbec      	blt.n	8004186 <__swhatbuf_r+0x12>
 80041ac:	9901      	ldr	r1, [sp, #4]
 80041ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80041b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80041b6:	4259      	negs	r1, r3
 80041b8:	4159      	adcs	r1, r3
 80041ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041be:	e7eb      	b.n	8004198 <__swhatbuf_r+0x24>

080041c0 <__smakebuf_r>:
 80041c0:	898b      	ldrh	r3, [r1, #12]
 80041c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041c4:	079d      	lsls	r5, r3, #30
 80041c6:	4606      	mov	r6, r0
 80041c8:	460c      	mov	r4, r1
 80041ca:	d507      	bpl.n	80041dc <__smakebuf_r+0x1c>
 80041cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	6123      	str	r3, [r4, #16]
 80041d4:	2301      	movs	r3, #1
 80041d6:	6163      	str	r3, [r4, #20]
 80041d8:	b003      	add	sp, #12
 80041da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041dc:	ab01      	add	r3, sp, #4
 80041de:	466a      	mov	r2, sp
 80041e0:	f7ff ffc8 	bl	8004174 <__swhatbuf_r>
 80041e4:	9f00      	ldr	r7, [sp, #0]
 80041e6:	4605      	mov	r5, r0
 80041e8:	4639      	mov	r1, r7
 80041ea:	4630      	mov	r0, r6
 80041ec:	f7ff fb16 	bl	800381c <_malloc_r>
 80041f0:	b948      	cbnz	r0, 8004206 <__smakebuf_r+0x46>
 80041f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041f6:	059a      	lsls	r2, r3, #22
 80041f8:	d4ee      	bmi.n	80041d8 <__smakebuf_r+0x18>
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	f043 0302 	orr.w	r3, r3, #2
 8004202:	81a3      	strh	r3, [r4, #12]
 8004204:	e7e2      	b.n	80041cc <__smakebuf_r+0xc>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	6020      	str	r0, [r4, #0]
 800420a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800420e:	81a3      	strh	r3, [r4, #12]
 8004210:	9b01      	ldr	r3, [sp, #4]
 8004212:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004216:	b15b      	cbz	r3, 8004230 <__smakebuf_r+0x70>
 8004218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800421c:	4630      	mov	r0, r6
 800421e:	f000 f81d 	bl	800425c <_isatty_r>
 8004222:	b128      	cbz	r0, 8004230 <__smakebuf_r+0x70>
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	81a3      	strh	r3, [r4, #12]
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	431d      	orrs	r5, r3
 8004234:	81a5      	strh	r5, [r4, #12]
 8004236:	e7cf      	b.n	80041d8 <__smakebuf_r+0x18>

08004238 <_fstat_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	4d07      	ldr	r5, [pc, #28]	@ (8004258 <_fstat_r+0x20>)
 800423c:	2300      	movs	r3, #0
 800423e:	4604      	mov	r4, r0
 8004240:	4608      	mov	r0, r1
 8004242:	4611      	mov	r1, r2
 8004244:	602b      	str	r3, [r5, #0]
 8004246:	f7fd f830 	bl	80012aa <_fstat>
 800424a:	1c43      	adds	r3, r0, #1
 800424c:	d102      	bne.n	8004254 <_fstat_r+0x1c>
 800424e:	682b      	ldr	r3, [r5, #0]
 8004250:	b103      	cbz	r3, 8004254 <_fstat_r+0x1c>
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	bd38      	pop	{r3, r4, r5, pc}
 8004256:	bf00      	nop
 8004258:	20000270 	.word	0x20000270

0800425c <_isatty_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4d06      	ldr	r5, [pc, #24]	@ (8004278 <_isatty_r+0x1c>)
 8004260:	2300      	movs	r3, #0
 8004262:	4604      	mov	r4, r0
 8004264:	4608      	mov	r0, r1
 8004266:	602b      	str	r3, [r5, #0]
 8004268:	f7fd f82f 	bl	80012ca <_isatty>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d102      	bne.n	8004276 <_isatty_r+0x1a>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	b103      	cbz	r3, 8004276 <_isatty_r+0x1a>
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	bd38      	pop	{r3, r4, r5, pc}
 8004278:	20000270 	.word	0x20000270

0800427c <_init>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr

08004288 <_fini>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr
